<Activity mc:Ignorable="sap sap2010" x:Class="SnippetsTests" sap2010:ExpressionActivityEditor.ExpressionActivityEditor="C#" sap:VirtualizedContainerService.HintSize="1963,1154" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upaq="clr-namespace:UiPath.Persistence.Activities.Queue;assembly=UiPath.Persistence.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Persistence.Activities.Queue</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Persistence.Orchestrator.Client.Models</x:String>
      <x:String>System.IO</x:String>
      <x:String>UiPath.Persistence.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="33">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Orchestrator.Client</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SnippetsTests" sap:VirtualizedContainerService.HintSize="540,1089" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence sap2010:Annotation.AnnotationText="Note: This snippet provides sample code for building long running workflows and requires UiPath.Persistence.Activities package to be included in the project. It is recommended to use “Orchestration Process” template to start building long running workflows.&#xA;&#xA;Create a Queue Item and suspend the workflow until completion of that queue item processing. " DisplayName="Add Queue Item And Wait till completion" sap:VirtualizedContainerService.HintSize="498,1001" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="Test" />
        <Variable x:TypeArguments="upaq:QueueItemData" Name="QueueItemObject" />
        <Variable x:TypeArguments="upaq:QueueItemData" Name="QueueItemOut" />
        <Variable x:TypeArguments="x:String" Default="TestQueue" Name="QueueName" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <upaq:AddQueueItemAndGetReference ContinueOnError="{x:Null}" DeferDate="{x:Null}" DisplayName="Add Queue Item And Get Reference" DueDate="{x:Null}" FolderPath="{x:Null}" sap:VirtualizedContainerService.HintSize="436,276" sap2010:WorkflowViewState.IdRef="AddQueueItemAndGetReference_1" ItemInformationCollection="{x:Null}" Priority="Normal" Reference="{x:Null}" TimeoutMs="{x:Null}">
        <upaq:AddQueueItemAndGetReference.ItemInformation>
          <InOutArgument x:TypeArguments="x:String" x:Key="Test">[Test]</InOutArgument>
        </upaq:AddQueueItemAndGetReference.ItemInformation>
        <upaq:AddQueueItemAndGetReference.QueueItemOutput>
          <OutArgument x:TypeArguments="upaq:QueueItemData">
            <CSharpReference x:TypeArguments="upaq:QueueItemData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">
              <CSharpReference.Result>
                <OutArgument x:TypeArguments="Location(upaq:QueueItemData)" />
              </CSharpReference.Result>QueueItemObject</CSharpReference>
          </OutArgument>
        </upaq:AddQueueItemAndGetReference.QueueItemOutput>
        <upaq:AddQueueItemAndGetReference.QueueName>
          <InArgument x:TypeArguments="x:String">
            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">
              <CSharpValue.Result>
                <OutArgument x:TypeArguments="x:String" />
              </CSharpValue.Result>QueueName</CSharpValue>
          </InArgument>
        </upaq:AddQueueItemAndGetReference.QueueName>
      </upaq:AddQueueItemAndGetReference>
      <ui:CommentOut Body="{x:Null}" sap2010:Annotation.AnnotationText="Any Processing " DisplayName="Any steps to be executed before suspending the workflow " sap:VirtualizedContainerService.HintSize="436,125" sap2010:WorkflowViewState.IdRef="CommentOut_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:CommentOut>
      <upaq:WaitForQueueItemAndResume ContinueOnError="{x:Null}" DisplayName="Wait For Queue Item And Resume" sap:VirtualizedContainerService.HintSize="436,162" sap2010:WorkflowViewState.IdRef="WaitForQueueItemAndResume_1" StatusMessage="{x:Null}" TimeoutMs="{x:Null}" WaitItemDataObject="{x:Null}">
        <upaq:WaitForQueueItemAndResume.QueueItemInput>
          <InArgument x:TypeArguments="upaq:QueueItemData">
            <CSharpValue x:TypeArguments="upaq:QueueItemData" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">
              <CSharpValue.Result>
                <OutArgument x:TypeArguments="upaq:QueueItemData" />
              </CSharpValue.Result>QueueItemObject</CSharpValue>
          </InArgument>
        </upaq:WaitForQueueItemAndResume.QueueItemInput>
        <upaq:WaitForQueueItemAndResume.QueueItemOutput>
          <OutArgument x:TypeArguments="upaq:QueueItemData">
            <CSharpReference x:TypeArguments="upaq:QueueItemData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">
              <CSharpReference.Result>
                <OutArgument x:TypeArguments="Location(upaq:QueueItemData)" />
              </CSharpReference.Result>QueueItemOut</CSharpReference>
          </OutArgument>
        </upaq:WaitForQueueItemAndResume.QueueItemOutput>
      </upaq:WaitForQueueItemAndResume>
      <WriteLine DisplayName="Write Test value after resuming the workflow" sap:VirtualizedContainerService.HintSize="436,90" sap2010:WorkflowViewState.IdRef="WriteLine_1" TextWriter="{x:Null}">
        <InArgument x:TypeArguments="x:String">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">
            <CSharpValue.Result>
              <OutArgument x:TypeArguments="x:String" />
            </CSharpValue.Result>Test</CSharpValue>
        </InArgument>
      </WriteLine>
    </Sequence>
  </Sequence>
</Activity>