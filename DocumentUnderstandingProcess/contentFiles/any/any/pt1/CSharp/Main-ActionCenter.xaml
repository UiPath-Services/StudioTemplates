<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.in_UseQueue="True" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:p="http://schemas.uipath.com/workflow/activities/document-processing-contracts/results" xmlns:p1="http://schemas.uipath.com/workflow/activities/intelligentocr" xmlns:p2="http://schemas.uipath.com/workflow/activities/document-processing-contracts/dom" xmlns:p3="http://schemas.uipath.com/workflow/activities/document-processing-contracts/taxonomy" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uiaam="clr-namespace:UiPath.IntelligentOCR.Activities.Actions.Model;assembly=UiPath.IntelligentOCR.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="The file path of the target document that is going to be processed." Name="in_TargetFile" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Variable that checks if the Document Understanding Process is using Orchestrator Queues or not." Name="in_UseQueue" Type="InArgument(x:Boolean)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>829.6,1333.6</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Taxonomy</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Dom</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.Actions.Model</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.IntelligentOCR.Activities</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Main Sequence - Action Center" sap:VirtualizedContainerService.HintSize="840,1268.8" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="config" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Used to control the number of attempts of retrying in case of a system exception." Name="maxAttempts" />
      <Variable x:TypeArguments="x:TimeSpan" sap2010:Annotation.AnnotationText="Used to control the amount of time between retries in the Retry Scope activity." Name="retryInterval" />
      <Variable x:TypeArguments="ui:QueueItem" sap2010:Annotation.AnnotationText="Stores the transaction item to be updated in the Orchestrator Queue." Name="TransactionItem" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Read the config file first; all Log &amp; Exception messages are defined there" DisplayName="ReadConfigFile" sap:VirtualizedContainerService.HintSize="798.4,82.4" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Framework\\00_ReadConfigFile.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">
          <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">new string[]{"Settings", "Constants", "InvoicePostProcessing"}</CSharpValue>
        </InArgument>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="out_Config">
          <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">config</CSharpReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="out_MaxAttempts">
          <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">maxAttempts</CSharpReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:TimeSpan" x:Key="out_RetryInterval">
          <CSharpReference x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">retryInterval</CSharpReference>
        </OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <TryCatch DisplayName="Try Catch - Process File" sap:VirtualizedContainerService.HintSize="798.4,1053.6" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <TryCatch.Try>
        <Flowchart DisplayName="File Processing Flowchart" sap:VirtualizedContainerService.HintSize="761.6,822.4" sap2010:WorkflowViewState.IdRef="Flowchart_2">
          <Flowchart.Variables>
            <Variable x:TypeArguments="p3:DocumentTaxonomy" sap2010:Annotation.AnnotationText="Stores the project taxonomy against which the documents can be processed." Name="docTaxonomy" />
            <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="The text extracted from the target document." Name="docText" />
            <Variable x:TypeArguments="p2:Document" sap2010:Annotation.AnnotationText="The Document Object Model (DOM) of the target document." Name="dom" />
            <Variable x:TypeArguments="p:ClassificationResult[]" sap2010:Annotation.AnnotationText="Classification results given by running the chosen classifier over the target document." Name="classificationResultsArray" />
            <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="Flag used for deciding if human validation is required in the classification process." Name="classificationSuccessFlag" />
          </Flowchart.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <av:Point x:Key="ShapeLocation">160,0</av:Point>
              <av:Size x:Key="ShapeSize">60,75.2</av:Size>
              <av:PointCollection x:Key="ConnectorLocation">190,74.6666666666667 190,93.6666666666667</av:PointCollection>
              <x:Double x:Key="Height">785.3333333333334</x:Double>
              <x:Double x:Key="Width">727.8</x:Double>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Flowchart.StartNode>
            <x:Reference>__ReferenceID14</x:Reference>
          </Flowchart.StartNode>
          <FlowStep x:Name="__ReferenceID5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <av:Point x:Key="ShapeLocation">90,586</av:Point>
                <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                <av:PointCollection x:Key="ConnectorLocation">190,638 190,654</av:PointCollection>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ParallelForEach x:TypeArguments="p:ClassificationResult" sap2010:Annotation.AnnotationText="Process all documents within the input file" DisplayName="Process Each Document" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_1">
              <ParallelForEach.Values>
                <InArgument x:TypeArguments="scg:IEnumerable(p:ClassificationResult)">
                  <CSharpValue x:TypeArguments="scg:IEnumerable(p:ClassificationResult)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_56">classificationResultsArray</CSharpValue>
                </InArgument>
              </ParallelForEach.Values>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="p:ClassificationResult">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="p:ClassificationResult" Name="classificationResult" />
                </ActivityAction.Argument>
                <TryCatch DisplayName="Try Catch - Process Each Document" sap:VirtualizedContainerService.HintSize="696,868" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                  <TryCatch.Variables>
                    <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Page range in the input file where the document is located (based on classification)" Name="currentPageRange">
                      <Variable.Default>
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_128">(classificationResult.DocumentBounds.StartPage + 1).ToString() + "-" + (classificationResult.DocumentBounds.StartPage + classificationResult.DocumentBounds.PageCount).ToString()</CSharpValue>
                      </Variable.Default>
                    </Variable>
                    <Variable x:TypeArguments="p:ExtractionResult" sap2010:Annotation.AnnotationText="The results of the data extraction process." Name="extractionResults" />
                  </TryCatch.Variables>
                  <TryCatch.Try>
                    <Flowchart DisplayName="Process Each Document - Flowchart" sap:VirtualizedContainerService.HintSize="659.2,636.8" sap2010:WorkflowViewState.IdRef="Flowchart_1">
                      <Flowchart.Variables>
                        <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="Flag used for deciding if human validation is required in the extraction process." Name="extractionSuccessFlag" />
                      </Flowchart.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <av:Point x:Key="ShapeLocation">220,2.5</av:Point>
                          <av:Size x:Key="ShapeSize">60,75.2</av:Size>
                          <x:Double x:Key="Width">625.9999999999999</x:Double>
                          <av:PointCollection x:Key="ConnectorLocation">250,77.1666666666667 250,93.6666666666667</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Flowchart.StartNode>
                        <x:Reference>__ReferenceID4</x:Reference>
                      </Flowchart.StartNode>
                      <FlowDecision x:Name="__ReferenceID1" DisplayName="Successul?" sap:VirtualizedContainerService.HintSize="70.4,87.2" sap2010:WorkflowViewState.IdRef="FlowDecision_1">
                        <FlowDecision.Condition>
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_119">extractionSuccessFlag</CSharpValue>
                        </FlowDecision.Condition>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <av:Point x:Key="ShapeLocation">214.8,256.4</av:Point>
                            <av:Size x:Key="ShapeSize">70.4,87.2</av:Size>
                            <av:PointCollection x:Key="FalseConnector">284.8,299.733333333333 314.8,299.733333333333 314.8,300 350,300</av:PointCollection>
                            <av:PointCollection x:Key="TrueConnector">214.8,299.733333333333 120,299.733333333333 120,430 150,430</av:PointCollection>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <FlowDecision.True>
                          <FlowStep x:Name="__ReferenceID0">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <av:Point x:Key="ShapeLocation">150,403.666666666667</av:Point>
                                <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Post-extraction &amp;&#xA;Data Export" DisplayName="Export" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_38" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\70_Export.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="p:ExtractionResult" x:Key="in_ExtractionResults">
                                  <CSharpValue x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_101">extractionResults</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                                  <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_100">config</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_99">maxAttempts</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                                  <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_98">retryInterval</CSharpValue>
                                </InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                          </FlowStep>
                        </FlowDecision.True>
                        <FlowDecision.False>
                          <FlowStep x:Name="__ReferenceID3">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <av:Point x:Key="ShapeLocation">350,265.333333333333</av:Point>
                                <av:Size x:Key="ShapeSize">200,68.8</av:Size>
                                <av:PointCollection x:Key="ConnectorLocation">450,334.666666666667 450,430 350,430</av:PointCollection>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Sequence sap2010:Annotation.AnnotationText="Extraction Validation &amp; Extractor training" DisplayName="Validate &amp; Train Extractors" sap:VirtualizedContainerService.HintSize="524.8,2288.8" sap2010:WorkflowViewState.IdRef="Sequence_7">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="p:ExtractionResult" sap2010:Annotation.AnnotationText="Human validated extraction results used for training." Name="validatedExtractionResults" />
                                <Variable x:TypeArguments="uiaam:DocumentValidationActionData" sap2010:Annotation.AnnotationText="Orchestrator Validation Action that needs to be human-handled in order to continue the process." Name="validationAction" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:LogMessage DisplayName="Log Message -  Create HitL Validation Action" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_4">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_68" xml:space="preserve">config["LogMessage_CreateValidationAction"] + " " + extractionResults.ResultsDocument.DocumentTypeId + " (pag " +  currentPageRange +")" + Environment.NewLine + config["logKey"]</CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                              <p1:CreateDocumentValidationAction TimeoutMs="{x:Null}" ActionPriority="Medium" DisplayName="Create Document Data Validation Action" sap:VirtualizedContainerService.HintSize="483.2,372" sap2010:WorkflowViewState.IdRef="CreateDocumentValidationAction_1" ShowOnlyRelevantPageRange="True">
                                <p1:CreateDocumentValidationAction.ActionCatalog>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_71">config["ActionCatalog"]</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.ActionCatalog>
                                <p1:CreateDocumentValidationAction.ActionOutput>
                                  <OutArgument x:TypeArguments="uiaam:DocumentValidationActionData">
                                    <CSharpReference x:TypeArguments="uiaam:DocumentValidationActionData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">validationAction</CSharpReference>
                                  </OutArgument>
                                </p1:CreateDocumentValidationAction.ActionOutput>
                                <p1:CreateDocumentValidationAction.ActionTitle>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_70">config["ValidationActionTitle"] + " " + extractionResults.ResultsDocument.DocumentTypeName</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.ActionTitle>
                                <p1:CreateDocumentValidationAction.AutomaticExtractionResults>
                                  <InArgument x:TypeArguments="p:ExtractionResult">
                                    <CSharpValue x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_69">extractionResults</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.AutomaticExtractionResults>
                                <p1:CreateDocumentValidationAction.BucketFolderPath>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_73">config["StorageBucketDirectoryPath"]</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.BucketFolderPath>
                                <p1:CreateDocumentValidationAction.BucketName>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_72">config["StorageBucketName"]</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.BucketName>
                                <p1:CreateDocumentValidationAction.DocumentObjectModel>
                                  <InArgument x:TypeArguments="p2:Document">
                                    <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_76">dom</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.DocumentObjectModel>
                                <p1:CreateDocumentValidationAction.DocumentPath>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_74">in_TargetFile</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.DocumentPath>
                                <p1:CreateDocumentValidationAction.DocumentText>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_75">docText</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.DocumentText>
                                <p1:CreateDocumentValidationAction.FolderPath>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_78">config["ActionFolderPath"]</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.FolderPath>
                                <p1:CreateDocumentValidationAction.Taxonomy>
                                  <InArgument x:TypeArguments="p3:DocumentTaxonomy">
                                    <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_77">docTaxonomy</CSharpValue>
                                  </InArgument>
                                </p1:CreateDocumentValidationAction.Taxonomy>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </p1:CreateDocumentValidationAction>
                              <If DisplayName="If Valid Transaction Item - Set Data Validation Status" sap:VirtualizedContainerService.HintSize="483.2,302.4" sap2010:WorkflowViewState.IdRef="If_3">
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_79">TransactionItem != null</CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="SetTransactionProgress - Extraction Validation" sap:VirtualizedContainerService.HintSize="378.4,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_36" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\ReusableWorkflows\SetTransactionProgress.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Progress">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_84">config["TransactionProgress_ExtractionValidation"]</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                                        <CSharpValue x:TypeArguments="ui:QueueItem" sap2010:WorkflowViewState.IdRef="CSharpValue`1_83">TransactionItem</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                                        <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_82">config</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                                        <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_81">maxAttempts</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                                        <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_80">retryInterval</CSharpValue>
                                      </InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </If.Then>
                              </If>
                              <ui:LogMessage DisplayName="Log Message - Wait On HitL Validation Action" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_5">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_106">config["LogMessage_WaitOnValidationAction"] + validationAction.Id.Value.ToString() + Environment.NewLine + config["logKey"]</CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                              <p1:WaitForDocumentValidationActionAndResume AutomaticExtractionResults="{x:Null}" DocumentObjectModel="{x:Null}" DocumentPath="{x:Null}" DocumentText="{x:Null}" DownloadFolderPath="{x:Null}" StatusMessage="{x:Null}" Taxonomy="{x:Null}" TimeoutMs="{x:Null}" WaitItemDataObject="{x:Null}" sap2010:Annotation.AnnotationText="Take note that, by default, the activity does NOT download the file from the storage bucket. &#xA;&#xA;If downloading the file is required after the job resumes, make sure to fill in the arguments as follows:&#xA;Download Directory Path = config(&quot;TemporaryLocalFolder&quot;)&#xA;Document Path arguments = in_TargetFile&#xA;&#xA;Note that, when going into production, you might want to disable the &quot;Remove Data from Storage&quot;, for auditing reasons. Should this be the case, a separate cleanup of storage bucket data should be considered.&#xA;&#xA;Note that, in case of user rejection, a DocumentRejectedByUserException is thrown here." DisplayName="Wait For Document Data Validation Action And Resume" sap:VirtualizedContainerService.HintSize="483.2,600.8" sap2010:WorkflowViewState.IdRef="WaitForDocumentValidationActionAndResume_1" RemoveDataFromStorage="True">
                                <p1:WaitForDocumentValidationActionAndResume.ActionInput>
                                  <InArgument x:TypeArguments="uiaam:DocumentValidationActionData">
                                    <CSharpValue x:TypeArguments="uiaam:DocumentValidationActionData" sap2010:WorkflowViewState.IdRef="CSharpValue`1_86">validationAction</CSharpValue>
                                  </InArgument>
                                </p1:WaitForDocumentValidationActionAndResume.ActionInput>
                                <p1:WaitForDocumentValidationActionAndResume.ActionOutput>
                                  <OutArgument x:TypeArguments="uiaam:DocumentValidationActionData">
                                    <CSharpReference x:TypeArguments="uiaam:DocumentValidationActionData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_22">validationAction</CSharpReference>
                                  </OutArgument>
                                </p1:WaitForDocumentValidationActionAndResume.ActionOutput>
                                <p1:WaitForDocumentValidationActionAndResume.ValidatedExtractionResults>
                                  <OutArgument x:TypeArguments="p:ExtractionResult">
                                    <CSharpReference x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpReference`1_21">validatedExtractionResults</CSharpReference>
                                  </OutArgument>
                                </p1:WaitForDocumentValidationActionAndResume.ValidatedExtractionResults>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </p1:WaitForDocumentValidationActionAndResume>
                              <ui:LogMessage DisplayName="Log Message - DataValidation Resume" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_6">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_87" xml:space="preserve">String.Format(config["LogMessage_ResumeAfterDataValidation"], validationAction.Id.Value.ToString(), validatedExtractionResults.ResultsDocument.DocumentTypeId + " (pag " +  currentPageRange +")"+ Environment.NewLine + config["logKey"])</CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                              </ui:LogMessage>
                              <If DisplayName="If - Train Extractors?" sap:VirtualizedContainerService.HintSize="483.2,302.4" sap2010:WorkflowViewState.IdRef="If_4">
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_88">!Convert.ToBoolean(config["SkipExtractorTraining"])</CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="TrainExtractors" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_37" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\60_TrainExtractors.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_96">in_TargetFile</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                                        <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_95">docTaxonomy</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="p2:Document" x:Key="in_DOM">
                                        <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_94">dom</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_DocText">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_93">docText</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="p:ExtractionResult" x:Key="in_ValidatedExtractionResults">
                                        <CSharpValue x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_92">validatedExtractionResults</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                                        <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_91">config</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                                        <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_90">maxAttempts</CSharpValue>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                                        <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_89">retryInterval</CSharpValue>
                                      </InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeWorkflowFile>
                                </If.Then>
                              </If>
                              <Assign DisplayName="Assign Extraction Result" sap:VirtualizedContainerService.HintSize="483.2,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="p:ExtractionResult">
                                    <CSharpReference x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpReference`1_24">extractionResults</CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="p:ExtractionResult">
                                    <CSharpValue x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_97">validatedExtractionResults</CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                            <FlowStep.Next>
                              <x:Reference>__ReferenceID0</x:Reference>
                            </FlowStep.Next>
                          </FlowStep>
                        </FlowDecision.False>
                      </FlowDecision>
                      <FlowStep x:Name="__ReferenceID4">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <av:Point x:Key="ShapeLocation">150,93.6666666666667</av:Point>
                            <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                            <av:PointCollection x:Key="ConnectorLocation">250,146.333333333333 250,163.666666666667</av:PointCollection>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Pre-extraction &amp;&#xA;Data Extraction" DisplayName="Extract" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_34" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\50_Extract.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_64">in_TargetFile</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                              <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_63">docTaxonomy</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="p2:Document" x:Key="in_DOM">
                              <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_62">dom</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_DocText">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_61">docText</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="p:ClassificationResult" x:Key="in_ClassificationResult">
                              <CSharpValue x:TypeArguments="p:ClassificationResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_60">classificationResult</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                              <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_59">config</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                              <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_58">maxAttempts</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                              <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_57">retryInterval</CSharpValue>
                            </InArgument>
                            <OutArgument x:TypeArguments="p:ExtractionResult" x:Key="out_ExtractionResults">
                              <CSharpReference x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">extractionResults</CSharpReference>
                            </OutArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <FlowStep.Next>
                          <FlowStep x:Name="__ReferenceID2">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <av:Point x:Key="ShapeLocation">150,163.666666666667</av:Point>
                                <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                                <av:PointCollection x:Key="ConnectorLocation">250,216.333333333333 250,246.333333333333 249.8,246.333333333333 249.8,256.4</av:PointCollection>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Extraction Bussiness Rule Validation&#xA;" DisplayName="Extraction Rules Check" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_35" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\55_ExtractionBusinessRuleValidation.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_67">in_TargetFile</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                                  <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_66">docTaxonomy</CSharpValue>
                                </InArgument>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                                  <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_65">config</CSharpValue>
                                </InArgument>
                                <InOutArgument x:TypeArguments="p:ExtractionResult" x:Key="io_ExtractionResults">
                                  <CSharpReference x:TypeArguments="p:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">extractionResults</CSharpReference>
                                </InOutArgument>
                                <OutArgument x:TypeArguments="x:Boolean" x:Key="out_AutoExtractionSuccess">
                                  <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">extractionSuccessFlag</CSharpReference>
                                </OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                            <FlowStep.Next>
                              <x:Reference>__ReferenceID1</x:Reference>
                            </FlowStep.Next>
                          </FlowStep>
                        </FlowStep.Next>
                      </FlowStep>
                      <x:Reference>__ReferenceID2</x:Reference>
                      <x:Reference>__ReferenceID3</x:Reference>
                      <x:Reference>__ReferenceID0</x:Reference>
                    </Flowchart>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="662.4,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="CatchDocumentExceptionSequence" sap:VirtualizedContainerService.HintSize="388,459.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:Comment DisplayName="Comment - Do NOT Rethrow" sap:VirtualizedContainerService.HintSize="346.666666666667,212.444444444444" sap2010:WorkflowViewState.IdRef="Comment_1" Text="Exceptions here are to be expected - generated by documents rejected by HitL&#xA;&#xA;Exceptions should NEVER be rethrown here!&#xA;&#xA;A rethrown exception would stop the processing flow of ALL documents within the input file and would orphan any pending Validation Actions!" />
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ERR_HandleDocumentError workflow" sap:VirtualizedContainerService.HintSize="346.666666666667,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_27" UnSafe="False" WorkflowFileName="Framework\\ERR_HandleDocumentError.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="in_TargetFile">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_105">in_TargetFile</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_PageRange">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_104">currentPageRange</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="s:Exception" x:Key="in_Exception">
                                <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_103">exception</CSharpValue>
                              </InArgument>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                                <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_102">config</CSharpValue>
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </ActivityAction>
            </ParallelForEach>
            <FlowStep.Next>
              <FlowStep x:Name="__ReferenceID11">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <av:Point x:Key="ShapeLocation">90,654</av:Point>
                    <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Post-export &amp;&#xA;Set Transaction Status (Success) &amp;&#xA;Process Cleanup" DisplayName="End Process " sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\\80_EndProcess.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                      <CSharpValue x:TypeArguments="ui:QueueItem" sap2010:WorkflowViewState.IdRef="CSharpValue`1_110">TransactionItem</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                      <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_109">config</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                      <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_108">maxAttempts</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                      <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_107">retryInterval</CSharpValue>
                    </InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
              </FlowStep>
            </FlowStep.Next>
          </FlowStep>
          <FlowDecision x:Name="__ReferenceID6" DisplayName="Successful?" sap:VirtualizedContainerService.HintSize="70.4,87.2" sap2010:WorkflowViewState.IdRef="FlowDecision_2">
            <FlowDecision.Condition>
              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">classificationSuccessFlag</CSharpValue>
            </FlowDecision.Condition>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <av:Point x:Key="ShapeLocation">154.8,486</av:Point>
                <av:Size x:Key="ShapeSize">70.4,87.2</av:Size>
                <av:PointCollection x:Key="TrueConnector">154.8,529.5 60,529.5 60,611.5 90,611.5</av:PointCollection>
                <av:PointCollection x:Key="FalseConnector">224.8,529.333333333333 254.8,529.333333333333 254.8,530 400,530</av:PointCollection>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <FlowDecision.True>
              <x:Reference>__ReferenceID5</x:Reference>
            </FlowDecision.True>
            <FlowDecision.False>
              <FlowStep x:Name="__ReferenceID13">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <av:Point x:Key="ShapeLocation">400,495.333333333333</av:Point>
                    <av:Size x:Key="ShapeSize">200,68.8</av:Size>
                    <av:PointCollection x:Key="ConnectorLocation">500,564.666666666667 500,612.333333333333 290,612.333333333333</av:PointCollection>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Sequence sap2010:Annotation.AnnotationText="Classification Validation&#xA;&amp; Classifier training" DisplayName="Validate &amp; Train Classifiers" sap:VirtualizedContainerService.HintSize="524.8,2288.8" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="p:ClassificationResult[]" sap2010:Annotation.AnnotationText="Human validated classification results used for training." Name="validatedClassificationResults" />
                    <Variable x:TypeArguments="uiaam:DocumentClassificationActionData" sap2010:Annotation.AnnotationText="Orchestrator Classification Action that needs to be human-handled in order to continue the process." Name="classificationAction" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message - Create Classification Validation Action" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_1">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26">config["LogMessage_CreateClassificationAction"] + Environment.NewLine + config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                  </ui:LogMessage>
                  <p1:CreateDocumentClassificationAction TimeoutMs="{x:Null}" ActionPriority="Medium" DisplayName="Create Document Classification Action - Main " sap:VirtualizedContainerService.HintSize="483.2,372" sap2010:WorkflowViewState.IdRef="CreateDocumentClassificationAction_1">
                    <p1:CreateDocumentClassificationAction.ActionCatalog>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">config["ActionCatalog"]</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.ActionCatalog>
                    <p1:CreateDocumentClassificationAction.ActionOutput>
                      <OutArgument x:TypeArguments="uiaam:DocumentClassificationActionData">
                        <CSharpReference x:TypeArguments="uiaam:DocumentClassificationActionData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">classificationAction</CSharpReference>
                      </OutArgument>
                    </p1:CreateDocumentClassificationAction.ActionOutput>
                    <p1:CreateDocumentClassificationAction.ActionTitle>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_28">config["ClassificationActionTitle"] + " " + Path.GetFileName(in_TargetFile)</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.ActionTitle>
                    <p1:CreateDocumentClassificationAction.AutomaticClassificationResults>
                      <InArgument x:TypeArguments="p:ClassificationResult[]">
                        <CSharpValue x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27">classificationResultsArray</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.AutomaticClassificationResults>
                    <p1:CreateDocumentClassificationAction.BucketFolderPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">config["StorageBucketDirectoryPath"]</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.BucketFolderPath>
                    <p1:CreateDocumentClassificationAction.BucketName>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">config["StorageBucketName"]</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.BucketName>
                    <p1:CreateDocumentClassificationAction.DocumentObjectModel>
                      <InArgument x:TypeArguments="p2:Document">
                        <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_34">dom</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.DocumentObjectModel>
                    <p1:CreateDocumentClassificationAction.DocumentPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">in_TargetFile</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.DocumentPath>
                    <p1:CreateDocumentClassificationAction.DocumentText>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_33">docText</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.DocumentText>
                    <p1:CreateDocumentClassificationAction.FolderPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_36">config["ActionFolderPath"]</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.FolderPath>
                    <p1:CreateDocumentClassificationAction.Taxonomy>
                      <InArgument x:TypeArguments="p3:DocumentTaxonomy">
                        <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_35">docTaxonomy</CSharpValue>
                      </InArgument>
                    </p1:CreateDocumentClassificationAction.Taxonomy>
                  </p1:CreateDocumentClassificationAction>
                  <If DisplayName="If Valid Transaction Item - Set Classification Validation Status" sap:VirtualizedContainerService.HintSize="483.2,302.4" sap2010:WorkflowViewState.IdRef="If_1">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_37">TransactionItem != null</CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="SetTransactionProgress - Classification Validation" sap:VirtualizedContainerService.HintSize="378.4,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_32" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\ReusableWorkflows\SetTransactionProgress.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Progress">
                            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">config["TransactionProgress_ClassificationValidation"]</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                            <CSharpValue x:TypeArguments="ui:QueueItem" sap2010:WorkflowViewState.IdRef="CSharpValue`1_41">TransactionItem</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                            <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_40">config</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                            <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_39">maxAttempts</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                            <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_38">retryInterval</CSharpValue>
                          </InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </If.Then>
                  </If>
                  <ui:LogMessage DisplayName="Log Message - Wait On Classification Validation Action" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_2">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_43">config["LogMessage_WaitOnClassificationAction"] + classificationAction.Id.Value.ToString() + Environment.NewLine + config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                  </ui:LogMessage>
                  <p1:WaitForDocumentClassificationActionAndResume AutomaticClassificationResults="{x:Null}" DocumentObjectModel="{x:Null}" DocumentPath="{x:Null}" DocumentText="{x:Null}" DownloadFolderPath="{x:Null}" StatusMessage="{x:Null}" Taxonomy="{x:Null}" TimeoutMs="{x:Null}" WaitItemDataObject="{x:Null}" sap2010:Annotation.AnnotationText="Take note that, by default, the activity does NOT download the file from the storage bucket. &#xA;&#xA;If downloading the file is required after the job resumes, make sure to fill in the arguments as follows:&#xA;Download Directory Path = config(&quot;TemporaryLocalFolder&quot;)&#xA;Document Path arguments = in_TargetFile&#xA;&#xA;Note that, when going into production, you might want to disable the &quot;Remove Data from Storage&quot;, for auditing reasons. Should this be the case, a separate cleanup of storage bucket data should be considered.&#xA;&#xA;Note that, in case of user rejection, a DocumentRejectedByUserException is thrown here." DisplayName="Wait For Document Classification Action And Resume - Main" sap:VirtualizedContainerService.HintSize="483.2,600.8" sap2010:WorkflowViewState.IdRef="WaitForDocumentClassificationActionAndResume_1" RemoveDataFromStorage="True">
                    <p1:WaitForDocumentClassificationActionAndResume.ActionInput>
                      <InArgument x:TypeArguments="uiaam:DocumentClassificationActionData">
                        <CSharpValue x:TypeArguments="uiaam:DocumentClassificationActionData" sap2010:WorkflowViewState.IdRef="CSharpValue`1_44">classificationAction</CSharpValue>
                      </InArgument>
                    </p1:WaitForDocumentClassificationActionAndResume.ActionInput>
                    <p1:WaitForDocumentClassificationActionAndResume.ActionOutput>
                      <OutArgument x:TypeArguments="uiaam:DocumentClassificationActionData">
                        <CSharpReference x:TypeArguments="uiaam:DocumentClassificationActionData" sap2010:WorkflowViewState.IdRef="CSharpReference`1_15">classificationAction</CSharpReference>
                      </OutArgument>
                    </p1:WaitForDocumentClassificationActionAndResume.ActionOutput>
                    <p1:WaitForDocumentClassificationActionAndResume.ValidatedClassificationResults>
                      <OutArgument x:TypeArguments="p:ClassificationResult[]">
                        <CSharpReference x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">validatedClassificationResults</CSharpReference>
                      </OutArgument>
                    </p1:WaitForDocumentClassificationActionAndResume.ValidatedClassificationResults>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </p1:WaitForDocumentClassificationActionAndResume>
                  <ui:LogMessage DisplayName="Log Message - ClassificationValidation Resume" sap:VirtualizedContainerService.HintSize="483.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_45">String.Format(config["LogMessage_ResumeAfterClassificationValidation"], classificationAction.Id.Value.ToString(), String.Join(" | ", validatedClassificationResults.Select(cResult =&gt; cResult.DocumentTypeId)) + Environment.NewLine + config["logKey"])</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                  </ui:LogMessage>
                  <If DisplayName="If - Train Classifiers?" sap:VirtualizedContainerService.HintSize="483.2,302.4" sap2010:WorkflowViewState.IdRef="If_2">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_46">! Convert.ToBoolean(config["SkipClassifierTraining"])</CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="TrainClassifiers" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_39" UnSafe="False" WorkflowFileName="Framework\\40_TrainClassifiers.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_127">in_TargetFile</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                            <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_126">docTaxonomy</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="p2:Document" x:Key="in_DOM">
                            <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_125">dom</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_DocText">
                            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_124">docText</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="p:ClassificationResult[]" x:Key="in_ValidatedClassificationResults">
                            <CSharpValue x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_123">validatedClassificationResults</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                            <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_122">config</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                            <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_121">maxAttempts</CSharpValue>
                          </InArgument>
                          <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                            <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_120">retryInterval</CSharpValue>
                          </InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </If.Then>
                  </If>
                  <Assign DisplayName="Assign Classification Result" sap:VirtualizedContainerService.HintSize="483.2,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                    <Assign.To>
                      <OutArgument x:TypeArguments="p:ClassificationResult[]">
                        <CSharpReference x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">classificationResultsArray</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="p:ClassificationResult[]">
                        <CSharpValue x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55">validatedClassificationResults</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
                <FlowStep.Next>
                  <x:Reference>__ReferenceID5</x:Reference>
                </FlowStep.Next>
              </FlowStep>
            </FlowDecision.False>
          </FlowDecision>
          <FlowDecision x:Name="__ReferenceID8" DisplayName="Using Queue?" sap:VirtualizedContainerService.HintSize="78.4,87.2" sap2010:WorkflowViewState.IdRef="FlowDecision_3">
            <FlowDecision.Condition>
              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_6">!in_UseQueue</CSharpValue>
            </FlowDecision.Condition>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <av:Point x:Key="ShapeLocation">150.333333333333,166.666666666667</av:Point>
                <av:Size x:Key="ShapeSize">78.4,87.2</av:Size>
                <av:PointCollection x:Key="TrueConnector">150.333333333333,210 60,210 60,300 90,300</av:PointCollection>
                <x:String x:Key="TrueLabel">No</x:String>
                <x:String x:Key="FalseLabel">Yes</x:String>
                <av:PointCollection x:Key="FalseConnector">228.733333333333,210.266666666667 258.733333333333,210.266666666667 258.733333333333,210.066666666667 300,210.066666666667</av:PointCollection>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <FlowDecision.True>
              <FlowStep x:Name="__ReferenceID7">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <av:Point x:Key="ShapeLocation">90,273.666666666667</av:Point>
                    <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                    <av:PointCollection x:Key="ConnectorLocation">190,326.333333333334 190,344</av:PointCollection>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Pre-digitization &amp; digitization " DisplayName="Digitize " sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\\20_Digitize.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">in_TargetFile</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                      <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">config</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                      <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_11">maxAttempts</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                      <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_10">retryInterval</CSharpValue>
                    </InArgument>
                    <OutArgument x:TypeArguments="p2:Document" x:Key="out_DOM">
                      <CSharpReference x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">dom</CSharpReference>
                    </OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_DocText">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">docText</CSharpReference>
                    </OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
                <FlowStep.Next>
                  <FlowStep x:Name="__ReferenceID10">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <av:Point x:Key="ShapeLocation">90,344</av:Point>
                        <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                        <av:PointCollection x:Key="ConnectorLocation">190,396.666666666667 190,413.666666666667</av:PointCollection>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Classify documents &amp; check if human intervention is needed" DisplayName="Classify " sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\\30_Classify.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">in_TargetFile</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                          <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">docTaxonomy</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="p2:Document" x:Key="in_DOM">
                          <CSharpValue x:TypeArguments="p2:Document" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">dom</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_DocText">
                          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">docText</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                          <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">config</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                          <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">maxAttempts</CSharpValue>
                        </InArgument>
                        <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                          <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">retryInterval</CSharpValue>
                        </InArgument>
                        <OutArgument x:TypeArguments="p:ClassificationResult[]" x:Key="out_ClassificationResults">
                          <CSharpReference x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">classificationResultsArray</CSharpReference>
                        </OutArgument>
                        <OutArgument x:TypeArguments="x:Boolean" x:Key="out_AutoClassificationSuccess">
                          <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">classificationSuccessFlag</CSharpReference>
                        </OutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeWorkflowFile>
                    <FlowStep.Next>
                      <FlowStep x:Name="__ReferenceID12">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <av:Point x:Key="ShapeLocation">90,413.666666666667</av:Point>
                            <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                            <av:PointCollection x:Key="ConnectorLocation">190,466.333333333333 189.8,466.333333333333 189.8,486</av:PointCollection>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Classification Business Rule Validation" DisplayName="Classification Rules Check" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\35_ClassificationBusinessRuleValidation.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">in_TargetFile</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                              <CSharpValue x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">docTaxonomy</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="p:ClassificationResult[]" x:Key="in_ClassificationResults">
                              <CSharpValue x:TypeArguments="p:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">classificationResultsArray</CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                              <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">config</CSharpValue>
                            </InArgument>
                            <OutArgument x:TypeArguments="x:Boolean" x:Key="out_AutoClassificationSuccess">
                              <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">classificationSuccessFlag</CSharpReference>
                            </OutArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <FlowStep.Next>
                          <x:Reference>__ReferenceID6</x:Reference>
                        </FlowStep.Next>
                      </FlowStep>
                    </FlowStep.Next>
                  </FlowStep>
                </FlowStep.Next>
              </FlowStep>
            </FlowDecision.True>
            <FlowDecision.False>
              <FlowStep x:Name="__ReferenceID9">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <av:Point x:Key="ShapeLocation">300,183.666666666667</av:Point>
                    <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                    <av:PointCollection x:Key="ConnectorLocation">400,236.333333333333 400,300 290,300</av:PointCollection>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Get the TransactionItem" DisplayName="GetTransactionItem " sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\\15_GetTransactionItem.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                      <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_9">config</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                      <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8">maxAttempts</CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                      <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_7">retryInterval</CSharpValue>
                    </InArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_TargetFile">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">in_TargetFile</CSharpReference>
                    </OutArgument>
                    <OutArgument x:TypeArguments="ui:QueueItem" x:Key="out_TransactionItem">
                      <CSharpReference x:TypeArguments="ui:QueueItem" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">TransactionItem</CSharpReference>
                    </OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
                <FlowStep.Next>
                  <x:Reference>__ReferenceID7</x:Reference>
                </FlowStep.Next>
              </FlowStep>
            </FlowDecision.False>
          </FlowDecision>
          <FlowStep x:Name="__ReferenceID14">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <av:Point x:Key="ShapeLocation">90,93.6666666666667</av:Point>
                <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                <av:PointCollection x:Key="ConnectorLocation">190,146.333333333333 190,166.666666666667</av:PointCollection>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Loads Orchestrator assets and executes logic for process-specific &amp; Document Understanding Initialization" DisplayName="Initialize Process " sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_17" UnSafe="False" WorkflowFileName="Framework\\10_InitializeProcess.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_AssetSheet">Assets</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">maxAttempts</CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                  <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">retryInterval</CSharpValue>
                </InArgument>
                <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="io_Config">
                  <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">config</CSharpReference>
                </InOutArgument>
                <OutArgument x:TypeArguments="p3:DocumentTaxonomy" x:Key="out_DocTaxonomy">
                  <CSharpReference x:TypeArguments="p3:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpReference`1_5">docTaxonomy</CSharpReference>
                </OutArgument>
              </ui:InvokeWorkflowFile.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeWorkflowFile>
            <FlowStep.Next>
              <x:Reference>__ReferenceID8</x:Reference>
            </FlowStep.Next>
          </FlowStep>
          <x:Reference>__ReferenceID9</x:Reference>
          <x:Reference>__ReferenceID7</x:Reference>
          <x:Reference>__ReferenceID10</x:Reference>
          <x:Reference>__ReferenceID11</x:Reference>
          <x:Reference>__ReferenceID12</x:Reference>
          <x:Reference>__ReferenceID13</x:Reference>
        </Flowchart>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="764.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="AbortSequence" sap:VirtualizedContainerService.HintSize="420.8,422.4" sap2010:WorkflowViewState.IdRef="Sequence_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ERR_AbortProcess workflow" sap:VirtualizedContainerService.HintSize="379.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_29" UnSafe="False" WorkflowFileName="Framework\\ERR_AbortProcess.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="s:Exception" x:Key="in_Exception">
                    <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_112">exception</CSharpValue>
                  </InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                    <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_111">config</CSharpValue>
                  </InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SetTransactionStatus workflow" sap:VirtualizedContainerService.HintSize="379.333333333333,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_30" UnSafe="False" WorkflowFileName="Framework\\ReusableWorkflows\\SetTransactionStatus.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                    <CSharpValue x:TypeArguments="ui:QueueItem" sap2010:WorkflowViewState.IdRef="CSharpValue`1_115">TransactionItem</CSharpValue>
                  </InArgument>
                  <InArgument x:TypeArguments="s:Exception" x:Key="in_Exception">
                    <CSharpValue x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="CSharpValue`1_114">exception</CSharpValue>
                  </InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                    <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_118">config</CSharpValue>
                  </InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
                    <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_117">maxAttempts</CSharpValue>
                  </InArgument>
                  <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
                    <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_116">retryInterval</CSharpValue>
                  </InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <Rethrow DisplayName="Rethrow Exception" sap:VirtualizedContainerService.HintSize="379.333333333333,22" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>