<Activity mc:Ignorable="sap sap2010" x:Class="TestCase" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:p="http://schemas.uipath.com/workflow/activities/document-processing-contracts/taxonomy" xmlns:p1="http://schemas.uipath.com/workflow/activities/document-processing-contracts/results" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uta="clr-namespace:UiPath.Testing.Activities;assembly=UiPath.Testing.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_TargetFile" Type="InArgument(x:String)" />
    <x:Property Name="in_UseQueue" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_ClassificationResultConfidence" Type="InArgument(x:String)" />
    <x:Property Name="in_ExpectedResult" Type="InArgument(x:String)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1477,2961</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>TestCase_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Taxonomy</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Testing</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.Testing</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.DocumentUnderstanding.ML.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="ClassificationBRValidationTestCase" sap:VirtualizedContainerService.HintSize="856,2896" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="config" />
      <Variable x:TypeArguments="x:String" Name="fileName" />
      <Variable x:TypeArguments="p:DocumentTaxonomy" Name="docTaxonomy" />
      <Variable x:TypeArguments="x:Int32" Name="maxAttempts" />
      <Variable x:TypeArguments="x:TimeSpan" Name="retryInterval" />
      <Variable x:TypeArguments="p1:ClassificationResult[]" Name="classificationResultsArray" />
      <Variable x:TypeArguments="x:Boolean" Name="classificationSuccessFlag" />
      <Variable x:TypeArguments="x:String" Name="classificationResultsArrayString" />
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="isText" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message - ClassificationBRValidationTestCase" sap:VirtualizedContainerService.HintSize="814,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">"ClassificationBRValidationTestCase started."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <Sequence DisplayName="... Given" sap:VirtualizedContainerService.HintSize="814,2118" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="772,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info">
        <ui:LogMessage.Message>
          <InArgument x:TypeArguments="x:Object">
            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2" xml:space="preserve">"Entered Given in  ClassificationBRValidationTestCase"</CSharpValue>
          </InArgument>
        </ui:LogMessage.Message>
      </ui:LogMessage>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke 00_ReadConfigFile workflow" sap:VirtualizedContainerService.HintSize="772,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="Framework\\00_ReadConfigFile.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">
            <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">new string[]{"Settings", "Constants"}</CSharpValue>
          </InArgument>
          <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="out_Config">
            <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">config</CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:Int32" x:Key="out_MaxAttempts">
            <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">maxAttempts</CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:TimeSpan" x:Key="out_RetryInterval">
            <CSharpReference x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">retryInterval</CSharpReference>
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <Assign sap:VirtualizedContainerService.HintSize="772,60" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">
            <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">in_TargetFile</CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">Data\ExampleDocuments\MergedDocuments.pdf</InArgument>
        </Assign.Value>
      </Assign>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke 10_InitializeProcess workflow" sap:VirtualizedContainerService.HintSize="772,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Framework\\10_InitializeProcess.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_AssetSheet">Assets</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxAttempts">
            <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">maxAttempts</CSharpValue>
          </InArgument>
          <InArgument x:TypeArguments="x:TimeSpan" x:Key="in_RetryInterval">
            <CSharpValue x:TypeArguments="x:TimeSpan" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">retryInterval</CSharpValue>
          </InArgument>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="io_Config">
            <CSharpReference x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">config</CSharpReference>
          </InOutArgument>
          <OutArgument x:TypeArguments="p:DocumentTaxonomy" x:Key="out_DocTaxonomy">
            <CSharpReference x:TypeArguments="p:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpReference`1_5">docTaxonomy</CSharpReference>
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <Assign DisplayName="Assign - file name" sap:VirtualizedContainerService.HintSize="772,60" sap2010:WorkflowViewState.IdRef="Assign_2">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">
            <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">fileName</CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">
            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_6">Path.GetFileNameWithoutExtension(in_TargetFile)</CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <ui:ReadTextFile File="{x:Null}" DisplayName="Read Text File" FileName="Tests\\Cache\\ClassifyFullDocument_MergedDocuments.json" sap:VirtualizedContainerService.HintSize="772,79" sap2010:WorkflowViewState.IdRef="ReadTextFile_2">
        <ui:ReadTextFile.Content>
          <OutArgument x:TypeArguments="x:String">
            <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">classificationResultsArrayString</CSharpReference>
          </OutArgument>
        </ui:ReadTextFile.Content>
      </ui:ReadTextFile>
      <Assign DisplayName="Assign - deserialize classification" sap:VirtualizedContainerService.HintSize="772,60" sap2010:WorkflowViewState.IdRef="Assign_3">
        <Assign.To>
          <OutArgument x:TypeArguments="p1:ClassificationResult[]">
            <CSharpReference x:TypeArguments="p1:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">classificationResultsArray</CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="p1:ClassificationResult[]">
            <CSharpValue x:TypeArguments="p1:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8">Newtonsoft.Json.JsonConvert.DeserializeObject&lt;ClassificationResult[]&gt;(classificationResultsArrayString)</CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <ui:ForEach x:TypeArguments="p1:ClassificationResult" CurrentIndex="{x:Null}" DisplayName="For Each ClassificationResult" sap:VirtualizedContainerService.HintSize="772,1172" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="p1:ClassificationResult">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="p1:ClassificationResult" Name="classificationResult" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="736,1048" sap2010:WorkflowViewState.IdRef="Sequence_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="694,956" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                <TryCatch.Try>
                  <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Single">
                        <CSharpReference x:TypeArguments="x:Single" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">classificationResult.Confidence</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Single">
                        <CSharpValue x:TypeArguments="x:Single" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">Convert.ToSingle(Convert.ToDecimal(in_ClassificationResultConfidence))</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </TryCatch.Try>
                <TryCatch.Catches>
                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="660,794" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ActivityAction x:TypeArguments="s:Exception">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                      </ActivityAction.Argument>
                      <Sequence sap:VirtualizedContainerService.HintSize="654,725" sap2010:WorkflowViewState.IdRef="Sequence_8">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="612,91" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info">
                          <ui:LogMessage.Message>
                            <InArgument x:TypeArguments="x:Object">
                              <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31" xml:space="preserve">"Entered Exception in Given in  ClassificationBRValidationTestCase"</CSharpValue>
                            </InArgument>
                          </ui:LogMessage.Message>
                        </ui:LogMessage>
                        <If sap:VirtualizedContainerService.HintSize="612,502" sap2010:WorkflowViewState.IdRef="If_1">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">in_ExpectedResult.Equals("failed")</CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="576,315" sap2010:WorkflowViewState.IdRef="Sequence_6">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <uta:VerifyExpressionWithOperator AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify - classificationSuccessFlag" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpressionWithOperator_1" Operator="RegexMatch" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False">
                                <uta:VerifyExpressionWithOperator.FirstExpression>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">in_ClassificationResultConfidence</CSharpValue>
                                  </InArgument>
                                </uta:VerifyExpressionWithOperator.FirstExpression>
                                <uta:VerifyExpressionWithOperator.OutputMessageFormat>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_35">"Classification result confidence is a text: " + in_ClassificationResultConfidence + " And the expected result: " + "'"+ in_ExpectedResult + "'"</CSharpValue>
                                  </InArgument>
                                </uta:VerifyExpressionWithOperator.OutputMessageFormat>
                                <uta:VerifyExpressionWithOperator.SecondExpression>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">"[a-zA-Z]*"</CSharpValue>
                                  </InArgument>
                                </uta:VerifyExpressionWithOperator.SecondExpression>
                              </uta:VerifyExpressionWithOperator>
                              <Assign sap:VirtualizedContainerService.HintSize="534,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">isText</CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </Assign.Value>
                              </Assign>
                              <ui:Break sap:VirtualizedContainerService.HintSize="534,22" sap2010:WorkflowViewState.IdRef="Break_1" />
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </Sequence>
                          </If.Else>
                        </If>
                      </Sequence>
                    </ActivityAction>
                  </Catch>
                </TryCatch.Catches>
              </TryCatch>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
        <ui:ForEach.Values>
          <InArgument x:TypeArguments="sc:IEnumerable">
            <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_9">classificationResultsArray</CSharpValue>
          </InArgument>
        </ui:ForEach.Values>
      </ui:ForEach>
    </Sequence>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="814,384" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <TryCatch.Try>
        <Sequence DisplayName="Test Sequence" sap:VirtualizedContainerService.HintSize="1359,1280" sap2010:WorkflowViewState.IdRef="Sequence_15">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="... When" sap:VirtualizedContainerService.HintSize="1317,335" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="379,91" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info">
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_11" xml:space="preserve">"Entered When in  ClassificationBRValidationTestCase"</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
            </ui:LogMessage>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke 35_ClassificationBusinessRuleValidation workflow" sap:VirtualizedContainerService.HintSize="379,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Framework\35_ClassificationBusinessRuleValidation.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_TargetDocument">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">in_TargetFile</CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="p:DocumentTaxonomy" x:Key="in_DocTaxonomy">
                  <CSharpValue x:TypeArguments="p:DocumentTaxonomy" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">docTaxonomy</CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="p1:ClassificationResult[]" x:Key="in_ClassificationResults">
                  <CSharpValue x:TypeArguments="p1:ClassificationResult[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">classificationResultsArray</CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">
                  <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">config</CSharpValue>
                </InArgument>
                <OutArgument x:TypeArguments="x:Boolean" x:Key="out_AutoClassificationSuccess">
                  <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">classificationSuccessFlag</CSharpReference>
                </OutArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </Sequence>
          <Sequence DisplayName="... Then" sap:VirtualizedContainerService.HintSize="1317,813" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1275,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info">
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19" xml:space="preserve">"Entered Then in  ClassificationBRValidationTestCase"</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
            </ui:LogMessage>
            <If DisplayName="If expected result" sap:VirtualizedContainerService.HintSize="1275,590" sap2010:WorkflowViewState.IdRef="If_2">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">in_ExpectedResult.Equals("passed")</CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence DisplayName="True classification" sap:VirtualizedContainerService.HintSize="576,153" sap2010:WorkflowViewState.IdRef="Sequence_9">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <uta:VerifyExpressionWithOperator AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify - classificationSuccessFlag" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpressionWithOperator_2" Operator="Equality" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False">
                    <uta:VerifyExpressionWithOperator.FirstExpression>
                      <InArgument x:TypeArguments="x:Boolean">
                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">classificationSuccessFlag</CSharpValue>
                      </InArgument>
                    </uta:VerifyExpressionWithOperator.FirstExpression>
                    <uta:VerifyExpressionWithOperator.OutputMessageFormat>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_33" xml:space="preserve">"Confidence is: " + in_ClassificationResultConfidence.ToString() + "  The classification threshold is: "+ config["ClassificationThreshold"]  + " And the expected result: " + "'" +in_ExpectedResult + "'"</CSharpValue>
                      </InArgument>
                    </uta:VerifyExpressionWithOperator.OutputMessageFormat>
                    <uta:VerifyExpressionWithOperator.SecondExpression>
                      <InArgument x:TypeArguments="x:Boolean">
                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">true</CSharpValue>
                      </InArgument>
                    </uta:VerifyExpressionWithOperator.SecondExpression>
                  </uta:VerifyExpressionWithOperator>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="False classification" sap:VirtualizedContainerService.HintSize="654,432" sap2010:WorkflowViewState.IdRef="Sequence_10">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If sap:VirtualizedContainerService.HintSize="612,340" sap2010:WorkflowViewState.IdRef="If_3">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">! isText</CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence sap:VirtualizedContainerService.HintSize="576,153" sap2010:WorkflowViewState.IdRef="Sequence_11">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <uta:VerifyExpressionWithOperator AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify - classificationSuccessFlag" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpressionWithOperator_3" Operator="Equality" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False">
                          <uta:VerifyExpressionWithOperator.FirstExpression>
                            <InArgument x:TypeArguments="x:Boolean">
                              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">classificationSuccessFlag</CSharpValue>
                            </InArgument>
                          </uta:VerifyExpressionWithOperator.FirstExpression>
                          <uta:VerifyExpressionWithOperator.OutputMessageFormat>
                            <InArgument x:TypeArguments="x:String">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_34" xml:space="preserve">"Confidence is: " + in_ClassificationResultConfidence.ToString() + "  The classification threshold is: "+ config["ClassificationThreshold"]  + " And the expected result: " + "'" +in_ExpectedResult + "'"</CSharpValue>
                            </InArgument>
                          </uta:VerifyExpressionWithOperator.OutputMessageFormat>
                          <uta:VerifyExpressionWithOperator.SecondExpression>
                            <InArgument x:TypeArguments="x:Boolean">
                              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">false</CSharpValue>
                            </InArgument>
                          </uta:VerifyExpressionWithOperator.SecondExpression>
                        </uta:VerifyExpressionWithOperator>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_12">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Sequence>
                    </If.Else>
                  </If>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="582,222" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="... Then" sap:VirtualizedContainerService.HintSize="576,153" sap2010:WorkflowViewState.IdRef="Sequence_13">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <uta:VerifyExpression AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify Expression" Expression="False" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpression_1" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False">
                <uta:VerifyExpression.OutputMessageFormat>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">"An exception was thrown. " + config["ClassificationThreshold"] + " value of ClassificationThreshold is not equal to threshold value 0.5."</CSharpValue>
                  </InArgument>
                </uta:VerifyExpression.OutputMessageFormat>
              </uta:VerifyExpression>
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <ui:LogMessage DisplayName="Log Message - ClassificationBRValidationTestCase" sap:VirtualizedContainerService.HintSize="814,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26">"ClassificationBRValidationTestCase finished."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
  </Sequence>
</Activity>