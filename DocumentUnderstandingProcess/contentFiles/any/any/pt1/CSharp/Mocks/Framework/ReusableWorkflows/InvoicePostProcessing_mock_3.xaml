<Activity mc:Ignorable="sap sap2010" x:Class="InvoicePostProcessing" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:p="http://schemas.uipath.com/workflow/activities/document-processing-contracts/taxonomy" xmlns:p1="http://schemas.uipath.com/workflow/activities/document-processing-contracts/results" xmlns:p2="http://schemas.uipath.com/workflow/activities/intelligentocr/extraction" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:utam="clr-namespace:UiPath.Testing.Activities.Mocks;assembly=UiPath.Testing.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="The file path of the target document that is going to be processed." Name="in_TargetDocument" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Stores the project taxonomy against which the documents can be processed." Name="in_DocTaxonomy" Type="InArgument(p:DocumentTaxonomy)" />
    <x:Property sap2010:Annotation.AnnotationText="Document Type ID found in the Classification Results." Name="in_DocumentType" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property sap2010:Annotation.AnnotationText="The results of the data extraction process." Name="io_ExtractionResults" Type="InOutArgument(p1:ExtractionResult)" />
    <x:Property sap2010:Annotation.AnnotationText="Flag used for deciding if human validation is required in the extraction process." Name="out_AutoExtractionSuccess" Type="OutArgument(x:Boolean)" />
    <x:Property sap2010:Annotation.AnnotationText="The result of the test" Name="out_TestMessage" Type="OutArgument(x:String)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>2303.2,6891.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="70">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Taxonomy</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.DataExtraction</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>UiPath.Testing.Activities.Mocks</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="96">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.DocumentUnderstanding.ML.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Default post-processing rules &amp; steps: &#xA;• Verify that all Mandatory Fields and Columns are extracted &#xA;• Verify that all table rows match the rule: Quantity * Unit Price = Line Amount &#xA;• Verify that the sum of all Line Amounts = Net Amount &#xA;• Sum up Net Amount with all the values defined as Config &quot;SubTotalAdditions&quot;. Verify that the sum of Net Amount + &quot;SubTotalAdditions&quot; = Total &#xA;• Verify the extraction confidence of all defined &quot;ConfidenceFields&quot; against their individual confidence thresholds &#xA;• Verify the extraction confidence of all the other fields against the &quot;other-Confidence&quot; threshold &#xA;&#xA;This should NOT be used as-is, except for demo purposes. For a real implementation, the post-processing &amp; validation should be tailored to the specifics of the business process. &#xA;The default implementation uses EN-US culture information. This means '.' is the decimal separator and &quot;,&quot; is the thousand separator. (e.g.: 10,000.00) " DisplayName="InvoicePostProcessing" sap:VirtualizedContainerService.HintSize="2313.6,6826.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataSet" sap2010:Annotation.AnnotationText="Used to store the extracted data from the ExtractionResults in the Export Extraction Results activity." Name="extractedDataSet" />
      <Variable x:TypeArguments="sd:DataTable" sap2010:Annotation.AnnotationText="DataTable generated from the extractedDataSet." Name="itemTable" />
      <Variable x:TypeArguments="s:DateTime" sap2010:Annotation.AnnotationText="Extracted Invoice Date." Name="invoiceDate" />
      <Variable x:TypeArguments="x:Decimal" sap2010:Annotation.AnnotationText="Computed 'Net Amount' or 'Subtotal' as a sum of the line amounts on the invoice." Name="subtotal" />
      <Variable x:TypeArguments="x:Decimal" sap2010:Annotation.AnnotationText="Computed 'total as a sum of subtotal and other charges that can appear on the invoice. (tax, shipping, etc)" Name="total" />
      <Variable x:TypeArguments="scg:List(x:String)" sap2010:Annotation.AnnotationText="List of extracted fields that need to be added to the subtotal computed value." Name="subTotalAdditions">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">new List&lt;string&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:List(x:String)" sap2010:Annotation.AnnotationText="List of mandatory fields that have to be extracted." Name="mandatoryFields">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">new List&lt;string&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:List(x:String)" sap2010:Annotation.AnnotationText="List of mandatory column fields that have to be extracted." Name="mandatoryColumnFields">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">new List&lt;string&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:List(x:String)" sap2010:Annotation.AnnotationText="Specific confidence defined fields. All the elements of the list will be checked against a individual confidence values." Name="confidenceFields" />
      <Variable x:TypeArguments="scg:List(x:String)" sap2010:Annotation.AnnotationText="Generic Confidence field. All the elements of the list will be checked against a single confidence value." Name="otherConfidenceFields" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:Annotation.AnnotationText="Dictionary containing the fields from the taxonomy and the extracted data." Name="documentFields">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:Dictionary(x:String, x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">new Dictionary&lt;string, string&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Regex text that will be used for cleanup of variables" Name="regexText" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message - Start Data Extraction" sap:VirtualizedContainerService.HintSize="2270.4,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_1">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_6">String.Format("{0} {1} (pag {2}-{3})\n{4}", in_Config["LogMessage_InvoicePostProcessing"], io_ExtractionResults.ResultsDocument.DocumentTypeId, io_ExtractionResults.ResultsDocument.Bounds.StartPage + 1, io_ExtractionResults.ResultsDocument.Bounds.StartPage + io_ExtractionResults.ResultsDocument.Bounds.PageCount, in_Config["logKey"])</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ui:Comment DisplayName="Comment - Important Notice" sap:VirtualizedContainerService.HintSize="2270.4,412" sap2010:WorkflowViewState.IdRef="Comment_1" Text="This is made with the default, out of the box, invoice taxonomy in mind, and uses these SPECIFIC taxonomy field names. Please propagate any changes in the workflow below. (e.g make sure the keys of documentFields are correct and that they match of what you have in the config file)&#xA;&#xA;Moreover, any OTHER logic that you would like added, should be added here. &#xA;&#xA;Do NOT use this as-is, except for demo purposes. For a production use case, it is recommended to tailor the workflow to your SPECIFIC needs instead.&#xA;&#xA;We're using the english culture information, which means we use '.' for decimal points. (eg: 10,000.00)" />
    <Sequence sap2010:Annotation.AnnotationText="In this sequence we are generating our variables.  &#xA;&#xA;- documentFields is a dictionary with:&#xA;       * keys, being the taxonomy field names &#xA;       * values, being the extracted data from the document for that specific field.&#xA;&#xA;- itemTable is a DataTable that contains the extracted data present in the document in table format (the line items). We check to see if the mandatory columns are present inside the extracted table, and if not, we are generating an empty table, such that the process will fail.&#xA;&#xA;- the other variables are lists of the defined variables in the config file" DisplayName="Setting Up Variables" sap:VirtualizedContainerService.HintSize="2270,6141" sap2010:WorkflowViewState.IdRef="Sequence_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:ForEach x:TypeArguments="p:Field" CurrentIndex="{x:Null}" DisplayName="For Each Field in the Taxonomy" sap:VirtualizedContainerService.HintSize="2208,294" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="p:Field">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="p:Field" Name="field" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Creating Taxonomy Dictionary" sap:VirtualizedContainerService.HintSize="400,160" sap2010:WorkflowViewState.IdRef="Sequence_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign Document Fields Dictionary" sap:VirtualizedContainerService.HintSize="358,70" sap2010:WorkflowViewState.IdRef="Assign_1">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">documentFields[field.FieldName]</CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_7">io_ExtractionResults.GetSimpleFieldValues(field.FieldId).FirstOrDefault() == null ? null : io_ExtractionResults.GetSimpleFieldValues(field.FieldId).FirstOrDefault().RawValue</CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
        <ui:ForEach.Values>
          <InArgument x:TypeArguments="sc:IEnumerable">
            <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">in_DocTaxonomy.DocumentTypes.First(docType =&gt; docType.DocumentTypeId == in_DocumentType).Fields</CSharpValue>
          </InArgument>
        </ui:ForEach.Values>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ForEach>
      <p2:ExportExtractionResults DisplayName="Export Extraction Results to a Dataset" sap:VirtualizedContainerService.HintSize="2208,183" sap2010:WorkflowViewState.IdRef="ExportExtractionResults_1" IncludeConfidence="False" IncludeOCRConfidence="False">
        <p2:ExportExtractionResults.DataSet>
          <OutArgument x:TypeArguments="sd:DataSet">
            <CSharpReference x:TypeArguments="sd:DataSet" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">extractedDataSet</CSharpReference>
          </OutArgument>
        </p2:ExportExtractionResults.DataSet>
        <p2:ExportExtractionResults.ExtractionResult>
          <InArgument x:TypeArguments="p1:ExtractionResult">
            <CSharpValue x:TypeArguments="p1:ExtractionResult" sap2010:WorkflowViewState.IdRef="CSharpValue`1_9">io_ExtractionResults</CSharpValue>
          </InArgument>
        </p2:ExportExtractionResults.ExtractionResult>
      </p2:ExportExtractionResults>
      <ui:MultipleAssign DisplayName="Initialize Lists and set variables" sap:VirtualizedContainerService.HintSize="2208,296" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
        <ui:MultipleAssign.AssignOperations>
          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:Boolean">
                  <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">out_AutoExtractionSuccess</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">subTotalAdditions</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_56">in_Config["SubTotalAdditions"].Split(',',System.StringSplitOptions.None).Select(value =&gt; value.Trim()).ToList()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_5">mandatoryFields</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_57">in_Config["MandatoryFields"].Split(',',System.StringSplitOptions.None).Select(value =&gt; value.Trim()).ToList()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">mandatoryColumnFields</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_58">in_Config["MandatoryColumnFields"].Split(',',System.StringSplitOptions.None).Select(value =&gt; value.Trim()).ToList()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">confidenceFields</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_59">in_Config["ConfidenceFields"].Split(',',System.StringSplitOptions.None).Select(value =&gt; value.Trim()).ToList()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">otherConfidenceFields</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">
                  <CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_61">in_Config["OtherConfidenceFields"].Split(',',System.StringSplitOptions.None).Select(value =&gt; value.Trim()).ToList()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="sd:DataTable">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">itemTable</CSharpReference>
                </OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">extractedDataSet.Tables.Count &gt; 2 &amp;&amp; !(extractedDataSet.Tables[2].AsEnumerable().Any(myRow =&gt; mandatoryColumnFields.Any(field =&gt; String.IsNullOrEmpty(myRow[field].ToString())))) ? extractedDataSet.Tables[2] : new DataTable()</CSharpValue>
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
          </scg:List>
        </ui:MultipleAssign.AssignOperations>
      </ui:MultipleAssign>
      <Sequence sap2010:Annotation.AnnotationText="In the config file we have set seveal fields as must have under MandatoryFields and MandatoryColumns. Here, we try to see if they are present, starting with the date. &#xA;&#xA;- If the date is not present, or not parsable, the process will fail and manual validation will be required.&#xA;- If any of the fields in MandatoryFields or itemTable (which contains the MandatoryColumns) are missing, manual validation will be required." DisplayName="Check Mandatory Extracted Values" sap:VirtualizedContainerService.HintSize="2208,1023" sap2010:WorkflowViewState.IdRef="Sequence_6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <TryCatch DisplayName="Try Catch | Setting the Date" sap:VirtualizedContainerService.HintSize="484,291" sap2010:WorkflowViewState.IdRef="TryCatch_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch.Try>
            <Assign DisplayName="Try to parse the invoice date" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_2">
              <Assign.To>
                <OutArgument x:TypeArguments="s:DateTime">
                  <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">invoiceDate</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="s:DateTime">
                  <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">documentFields["Date"] == null? DateTime.MinValue : DateTime.Parse(documentFields["Date"])</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Set Date Failure" sap:VirtualizedContainerService.HintSize="376,285" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Setting the Date Failure" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_71">String.Format("{0}\n{1}", in_Config["LogMessage_InvoicePostProcessing_DateFailure"], in_Config["logKey"])</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                  </ui:LogMessage>
                  <Assign DisplayName="Set AutoExtraction to False" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">
                        <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">out_AutoExtractionSuccess</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
        </TryCatch>
        <If DisplayName="Mandatory Field Check" sap:VirtualizedContainerService.HintSize="484,476" sap2010:WorkflowViewState.IdRef="If_1">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">mandatoryFields.Any(field =&gt; documentFields[field] == null) || itemTable.Rows.Count == 0</CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence DisplayName="Mandatory Field Check - Failure" sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Mandatory Fields Failure" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3">
                <ui:LogMessage.Message>
                  <InArgument x:TypeArguments="x:Object">
                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_MandatoryFieldsFailure"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                  </InArgument>
                </ui:LogMessage.Message>
              </ui:LogMessage>
              <Assign DisplayName="Mandatory Fields Failed" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">
                    <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">out_AutoExtractionSuccess</CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence sap2010:Annotation.AnnotationText="In the Value Cleanup part we're removing empty fields, symbols, extra text (OCR errors), and everything that is NOT a number or a decimal point from the extracted field. This will allows us to perform mathematical operations with the values." DisplayName="Value Cleanup" sap:VirtualizedContainerService.HintSize="2208,492" sap2010:WorkflowViewState.IdRef="Sequence_7">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign DisplayName="Assign RegexText" sap:VirtualizedContainerService.HintSize="431,60" sap2010:WorkflowViewState.IdRef="Assign_5">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">
              <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">regexText</CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[^0-9\.]+</InArgument>
          </Assign.Value>
        </Assign>
        <ui:MultipleAssign DisplayName="Remove currency symbols and empty fields" sap:VirtualizedContainerService.HintSize="431,224" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
          <ui:MultipleAssign.AssignOperations>
            <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_8">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">documentFields["tax"]</CSharpReference>
                  </OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27">String.IsNullOrEmpty(documentFields["Tax Amount"]) || (documentFields["Tax Amount"].Equals("0") || documentFields["Tax Amount"].Equals("0.0")) ? "0.00" : Regex.Replace(documentFields["Tax Amount"], regexText, "").Replace(" ","")</CSharpValue>
                  </InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_15">documentFields["discount"]</CSharpReference>
                  </OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_28">String.IsNullOrEmpty(documentFields["Discount"]) || (documentFields["Discount"].Equals("0") || documentFields["Discount"].Equals("0.0"))? "0.00" : Regex.Replace(documentFields["Discount"], regexText, "").Replace(" ","")</CSharpValue>
                  </InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_10">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">documentFields["shipping-handling"]</CSharpReference>
                  </OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">String.IsNullOrEmpty(documentFields["Shipping Charges"]) || (documentFields["Shipping Charges"].Equals("0") || documentFields["Shipping Charges"].Equals("0.0")) ? "0.00" : Regex.Replace(documentFields["Shipping Charges"], regexText, "").Replace(" ","")</CSharpValue>
                  </InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_11">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">documentFields["net-amount"]</CSharpReference>
                  </OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">String.IsNullOrEmpty(documentFields["Net Amount"]) || (documentFields["Net Amount"].Equals("0") || documentFields["Net Amount"].Equals("0.0"))? "0.00" : Regex.Replace(documentFields["Net Amount"], regexText, "").Replace(" ","")</CSharpValue>
                  </InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_12">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">
                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">documentFields["total"]</CSharpReference>
                  </OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">String.IsNullOrEmpty(documentFields["Total"]) || (documentFields["Total"].Equals("0") || documentFields["Total"].Equals("0.0"))? "0.00" : Regex.Replace(documentFields["Total"], regexText, "").Replace(" ","")</CSharpValue>
                  </InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
            </scg:List>
          </ui:MultipleAssign.AssignOperations>
        </ui:MultipleAssign>
      </Sequence>
      <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="This is where we are doing the math operations on the Quantity, Unit Price, and Line Amounts to make sure they match to their extracted counterparts. &#xA;Before doing anything like that though, we repeat a similar operation as we did in the previous sequence where we remove any non-numeric characters from the variables.&#xA;If at any point, the math doesn't add up, we break this loop and we move to manual validation." DisplayName="For Each Row - Line Verification" sap:VirtualizedContainerService.HintSize="2208,2103" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
        <ui:ForEachRow.Body>
          <ActivityAction x:TypeArguments="sd:DataRow">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Line Computation" sap:VirtualizedContainerService.HintSize="757,1891" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Number of decimal points in the Line Amount" Name="decimalPoints" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:MultipleAssign DisplayName="Remove currency symbols and empty spaces" sap:VirtualizedContainerService.HintSize="695,162" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
                <ui:MultipleAssign.AssignOperations>
                  <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_13">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="x:Object">
                          <CSharpReference x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">CurrentRow["Unit Price"]</CSharpReference>
                        </OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="x:Object">
                          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_36">String.IsNullOrEmpty(CurrentRow["Unit Price"].ToString()) || (CurrentRow["Unit Price"].Equals("0") || CurrentRow["Unit Price"].Equals("0.0"))? "0.00" : Regex.Replace(CurrentRow["Unit Price"].ToString(), regexText, "").Replace(" ","")</CSharpValue>
                        </InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_14">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="x:Object">
                          <CSharpReference x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">CurrentRow["Quantity"]</CSharpReference>
                        </OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="x:Object">
                          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_37">String.IsNullOrEmpty(CurrentRow["Quantity"].ToString()) || (CurrentRow["Quantity"].Equals("0") || CurrentRow["Quantity"].Equals("0.0"))? "0.00" : Regex.Replace(CurrentRow["Quantity"].ToString(), regexText, "").Replace(" ","")</CSharpValue>
                        </InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_15">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="x:Object">
                          <CSharpReference x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpReference`1_21">CurrentRow["Line Amount"]</CSharpReference>
                        </OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="x:Object">
                          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_38">String.IsNullOrEmpty(CurrentRow["Line Amount"].ToString()) || (CurrentRow["Line Amount"].Equals("0") || CurrentRow["Line Amount"].Equals("0.0"))? "0.00" : Regex.Replace(CurrentRow["Line Amount"].ToString(), regexText, "").Replace(" ","")</CSharpValue>
                        </InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                  </scg:List>
                </ui:MultipleAssign.AssignOperations>
              </ui:MultipleAssign>
              <Sequence sap2010:Annotation.AnnotationText="Count the number of decimal points in the Line Amount value." DisplayName="Number of decimal places" sap:VirtualizedContainerService.HintSize="715,923" sap2010:WorkflowViewState.IdRef="Sequence_10">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Decimal" sap2010:Annotation.AnnotationText="Line Amount value" Name="lineAmount" />
                  <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Line Amount value converted to string" Name="lineAmountString" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap2010:Annotation.AnnotationText="Save the line amount into a local variable" sap:VirtualizedContainerService.HintSize="653,91" sap2010:WorkflowViewState.IdRef="Assign_11">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Decimal">
                      <CSharpReference x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpReference`1_27">lineAmount</CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Decimal">
                      <CSharpValue x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpValue`1_72">Convert.ToDecimal(CurrentRow["Line Amount"])</CSharpValue>
                    </InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <Assign sap2010:Annotation.AnnotationText="Convert to string" sap:VirtualizedContainerService.HintSize="653,101" sap2010:WorkflowViewState.IdRef="Assign_12">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_28">lineAmountString</CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_64">lineAmount.ToString()</CSharpValue>
                    </InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <If sap2010:Annotation.AnnotationText="Check for the &quot;.&quot;" DisplayName="Check for number of decimals" sap:VirtualizedContainerService.HintSize="653,498" sap2010:WorkflowViewState.IdRef="If_3">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_70">lineAmountString.IndexOf('.')==-1</CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,152" sap2010:WorkflowViewState.IdRef="Sequence_11">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Assign - no decimals" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_13">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">
                            <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_34">decimalPoints</CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">0</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,152" sap2010:WorkflowViewState.IdRef="Sequence_12">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Assign - number of decimals" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_15">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">
                            <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_35">decimalPoints</CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">
                            <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_69">lineAmountString.Substring(lineAmountString.IndexOf(".") + 1).Length</CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
              <If DisplayName="Compute Line Amount" sap:VirtualizedContainerService.HintSize="715,636" sap2010:WorkflowViewState.IdRef="If_2">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_73">Math.Round(Convert.ToDecimal(CurrentRow["Unit Price"]) * Convert.ToDecimal(CurrentRow["Quantity"]), Convert.ToInt32(decimalPoints)) == Convert.ToDecimal(CurrentRow["Line Amount"])</CSharpValue>
                  </InArgument>
                </If.Condition>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Assign DisplayName="Compute Subtotal" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Decimal">
                        <CSharpReference x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpReference`1_22">subtotal</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Decimal">
                        <CSharpValue x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpValue`1_40">subtotal + Convert.ToDecimal(CurrentRow["Line Amount"])</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="Compute Line Failure" sap:VirtualizedContainerService.HintSize="400,373" sap2010:WorkflowViewState.IdRef="Sequence_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:LogMessage DisplayName="Line Amount Failure" sap:VirtualizedContainerService.HintSize="358,101" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info">
                      <ui:LogMessage.Message>
                        <InArgument x:TypeArguments="x:Object">
                          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_41" xml:space="preserve">CurrentRow["Unit Price"].ToString() == String.Empty || CurrentRow["Quantity"].ToString() == String.Empty ? in_Config["LogMessage_InvoicePostProcessing_LineAmountFailureEmpty"] : in_Config["LogMessage_InvoicePostProcessing_LineAmountFailureMath"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                        </InArgument>
                      </ui:LogMessage.Message>
                    </ui:LogMessage>
                    <Assign DisplayName="Line Amount Failed Assign False" sap:VirtualizedContainerService.HintSize="358,70" sap2010:WorkflowViewState.IdRef="Assign_7">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_23">out_AutoExtractionSuccess</CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:Break DisplayName="Break - Line Verification" sap:VirtualizedContainerService.HintSize="358,32" sap2010:WorkflowViewState.IdRef="Break_1" />
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
          </ActivityAction>
        </ui:ForEachRow.Body>
        <ui:ForEachRow.DataTable>
          <InArgument x:TypeArguments="sd:DataTable">
            <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">itemTable</CSharpValue>
          </InArgument>
        </ui:ForEachRow.DataTable>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ForEachRow>
      <utam:MockActivity DisplayName="Mock Extraction Results Check" sap:VirtualizedContainerService.HintSize="2208,1241" sap2010:WorkflowViewState.IdRef="MockActivity_2" MockedActivityIdRef="Flowchart_1">
        <utam:MockActivity.MockedActivity>
          <Flowchart sap2010:Annotation.AnnotationText="In this step, we check to see if we have found any issues up until now in the process. If we did, we skip this flowchart and set the AutoExtraction to False, otherwise, we continue with the checks:&#xA;1. SubTotal - Checks to see if the sum of the line amounts match the extracted Net Amount.&#xA;2. Total - Checks to see if the sum of the additions to the subtotal match the extracted Total. &#xA;3.  Specific Fields - Checks the list (defined in the Config File) with their specific confidence threshold. If they are below that, the process will require manual validation.&#xA;4. Other fields - Checks the list ( defined in the Config File) with the confidence threshold defined for 'other-Confidence'. If they are below that, the process will require manual validation.&#xA;&#xA;If at any point, the above steps return a 'true', the invoice will require manual validation. &#xA;If all the if pass through the 'false' branch, the invoice will skip manual validation and go directly to the next step." DisplayName="Extraction Results Check" sap:VirtualizedContainerService.HintSize="966,868" sap2010:WorkflowViewState.IdRef="Flowchart_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <av:Point x:Key="ShapeLocation">0,2.5</av:Point>
                <av:Size x:Key="ShapeSize">60,75</av:Size>
                <av:PointCollection x:Key="ConnectorLocation">60,40 190,40 190,66.5</av:PointCollection>
                <x:Double x:Key="Width">931.6666666666667</x:Double>
                <x:Double x:Key="Height">660</x:Double>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Flowchart.StartNode>
              <x:Reference>__ReferenceID28</x:Reference>
            </Flowchart.StartNode>
            <FlowStep x:Name="__ReferenceID15">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">19,590</av:Point>
                  <av:Size x:Key="ShapeSize">262,60</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign Extraction Failure" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">
                    <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_24">out_AutoExtractionSuccess</CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                </Assign.Value>
              </Assign>
            </FlowStep>
            <FlowDecision x:Name="__ReferenceID20" DisplayName="Subtotal Issue?" sap:VirtualizedContainerService.HintSize="84,87" sap2010:WorkflowViewState.IdRef="FlowDecision_4">
              <FlowDecision.Condition>
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_52" xml:space="preserve">!( documentFields["Net Amount"] != null &amp;&amp; subtotal ==Convert.ToDecimal(documentFields["Net Amount"])  || (documentFields["Net Amount"] == null) || ( documentFields["Net Amount"] != null &amp;&amp; (Convert.ToDecimal(documentFields["Net Amount"]) == 0)))</CSharpValue>
              </FlowDecision.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <av:Point x:Key="ShapeLocation">268,136.5</av:Point>
                  <av:Size x:Key="ShapeSize">84,87</av:Size>
                  <av:PointCollection x:Key="TrueConnector">268,180 238,180 238,315 210,315</av:PointCollection>
                  <av:PointCollection x:Key="FalseConnector">352,180 382,180 382,45 440,45</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <FlowDecision.True>
                <FlowStep x:Name="__ReferenceID16">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">10,284.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">10,315 0,315 0,620 19,620</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Subtotal Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_45">String.Format(in_Config["LogMessage_InvoicePostProcessing_SubtotalFailure"], subtotal, documentFields["net-amount"]) + Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <x:Reference>__ReferenceID15</x:Reference>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.True>
              <FlowDecision.False>
                <FlowStep x:Name="__ReferenceID27">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">440,14.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">540,75.5 540,100</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Subtotal Pass" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_7">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">String.Format(in_Config["LogMessage_InvoicePostProcessing_SubtotalPass"], subtotal, documentFields["Net Amount"])+ Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <FlowStep x:Name="__ReferenceID24">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">409,100</av:Point>
                          <av:Size x:Key="ShapeSize">262,70</av:Size>
                          <av:PointCollection x:Key="ConnectorLocation">409,135 380,135 380,176.50000000000003 410,176.50000000000003 410,206.5</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Total Calculation" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_9">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Decimal">
                            <CSharpReference x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpReference`1_25">total</CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Decimal">
                            <CSharpValue x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpValue`1_44">subTotalAdditions.Select(field =&gt; Convert.ToDecimal(documentFields[field])).ToList().Sum() + subtotal</CSharpValue>
                          </InArgument>
                        </Assign.Value>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Assign>
                      <FlowStep.Next>
                        <FlowDecision x:Name="__ReferenceID17" DisplayName="Total Issue?" sap:VirtualizedContainerService.HintSize="70,87" sap2010:WorkflowViewState.IdRef="FlowDecision_3">
                          <FlowDecision.Condition>
                            <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_53">! (total == Convert.ToDecimal(documentFields["Total"]))</CSharpValue>
                          </FlowDecision.Condition>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <av:Point x:Key="ShapeLocation">375,206.5</av:Point>
                              <av:Size x:Key="ShapeSize">70,87</av:Size>
                              <av:PointCollection x:Key="TrueConnector">375,250 345,250 345,385 210,385</av:PointCollection>
                              <av:PointCollection x:Key="FalseConnector">445,250 538,250 538,286.5</av:PointCollection>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <FlowDecision.True>
                            <FlowStep x:Name="__ReferenceID18">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <av:Point x:Key="ShapeLocation">10,354.5</av:Point>
                                  <av:Size x:Key="ShapeSize">200,61</av:Size>
                                  <av:PointCollection x:Key="ConnectorLocation">10,385 0,385 0,620 19,620</av:PointCollection>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:LogMessage DisplayName="Total Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_8">
                                <ui:LogMessage.Message>
                                  <InArgument x:TypeArguments="x:Object">
                                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_46" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_TotalFailure"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                  </InArgument>
                                </ui:LogMessage.Message>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:LogMessage>
                              <FlowStep.Next>
                                <x:Reference>__ReferenceID15</x:Reference>
                              </FlowStep.Next>
                            </FlowStep>
                          </FlowDecision.True>
                          <FlowDecision.False>
                            <FlowDecision x:Name="__ReferenceID25" DisplayName="Specific Fields Confidence?" sap:VirtualizedContainerService.HintSize="149,87" sap2010:WorkflowViewState.IdRef="FlowDecision_2">
                              <FlowDecision.Condition>
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_54">confidenceFields.Any(confField =&gt; (! String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; ! io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config[confField+"-Confidence"])? true : false))</CSharpValue>
                              </FlowDecision.Condition>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <av:Point x:Key="ShapeLocation">463.5,286.5</av:Point>
                                  <av:Size x:Key="ShapeSize">149,87</av:Size>
                                  <av:PointCollection x:Key="TrueConnector">463.5,330 433.5,330 433.5,450 210,450</av:PointCollection>
                                  <av:PointCollection x:Key="FalseConnector">612.5,330 706,330 706,356.5</av:PointCollection>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <FlowDecision.True>
                                <FlowStep x:Name="__ReferenceID22">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <av:Point x:Key="ShapeLocation">10,424.5</av:Point>
                                      <av:Size x:Key="ShapeSize">200,52</av:Size>
                                      <av:PointCollection x:Key="ConnectorLocation">10,450.5 0,450.5 0,620 19,620</av:PointCollection>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="Specific Confidence Fields Failure" sap:VirtualizedContainerService.HintSize="200,52" sap2010:WorkflowViewState.IdRef="LogMessage_9">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_48" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_ConfidenceFieldsFailure"]  + String.Join(", ", confidenceFields.Where(confField =&gt; (!String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; !io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config[confField+"-Confidence"])? true : false) == true).ToList()) +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LogMessage>
                                  <FlowStep.Next>
                                    <x:Reference>__ReferenceID15</x:Reference>
                                  </FlowStep.Next>
                                </FlowStep>
                              </FlowDecision.True>
                              <FlowDecision.False>
                                <FlowDecision x:Name="__ReferenceID26" DisplayName="Other Fields Confidence?" sap:VirtualizedContainerService.HintSize="138,87" sap2010:WorkflowViewState.IdRef="FlowDecision_1">
                                  <FlowDecision.Condition>
                                    <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55">otherConfidenceFields.Any(confField =&gt; (! String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; ! io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config["other-Confidence"])? true : false))</CSharpValue>
                                  </FlowDecision.Condition>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <av:Point x:Key="ShapeLocation">637,356.5</av:Point>
                                      <av:Size x:Key="ShapeSize">138,87</av:Size>
                                      <av:PointCollection x:Key="TrueConnector">637,400 607,400 607,520 210,520</av:PointCollection>
                                      <av:PointCollection x:Key="FalseConnector">775,400 800,400 800,590</av:PointCollection>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <FlowDecision.True>
                                    <FlowStep x:Name="__ReferenceID23">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <av:Point x:Key="ShapeLocation">10,494.5</av:Point>
                                          <av:Size x:Key="ShapeSize">200,52</av:Size>
                                          <av:PointCollection x:Key="ConnectorLocation">10,520.5 0,520.5 0,620 19,620</av:PointCollection>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:LogMessage DisplayName="Other Confidence fields Failure" sap:VirtualizedContainerService.HintSize="200,52" sap2010:WorkflowViewState.IdRef="LogMessage_10">
                                        <ui:LogMessage.Message>
                                          <InArgument x:TypeArguments="x:Object">
                                            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_50" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_ConfidenceFieldsFailure"] + String.Join(", ", otherConfidenceFields.Where(confField =&gt; (!String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; !io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config["other-Confidence"])? true : false) == true).ToList())  +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                          </InArgument>
                                        </ui:LogMessage.Message>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:LogMessage>
                                      <FlowStep.Next>
                                        <x:Reference>__ReferenceID15</x:Reference>
                                      </FlowStep.Next>
                                    </FlowStep>
                                  </FlowDecision.True>
                                  <FlowDecision.False>
                                    <FlowStep x:Name="__ReferenceID19">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <av:Point x:Key="ShapeLocation">669,590</av:Point>
                                          <av:Size x:Key="ShapeSize">262,70</av:Size>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Assign DisplayName="Assign Extraction Success" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_10">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Boolean">
                                            <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_26">out_AutoExtractionSuccess</CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </FlowStep>
                                  </FlowDecision.False>
                                </FlowDecision>
                              </FlowDecision.False>
                            </FlowDecision>
                          </FlowDecision.False>
                        </FlowDecision>
                      </FlowStep.Next>
                    </FlowStep>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.False>
            </FlowDecision>
            <x:Reference>__ReferenceID16</x:Reference>
            <x:Reference>__ReferenceID17</x:Reference>
            <x:Reference>__ReferenceID18</x:Reference>
            <x:Reference>__ReferenceID19</x:Reference>
            <FlowDecision x:Name="__ReferenceID28" DisplayName="AutoExtraction Issue?" sap:VirtualizedContainerService.HintSize="119,87" sap2010:WorkflowViewState.IdRef="FlowDecision_5">
              <FlowDecision.Condition>
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_51">out_AutoExtractionSuccess == false</CSharpValue>
              </FlowDecision.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <av:Point x:Key="ShapeLocation">130.5,66.5</av:Point>
                  <av:Size x:Key="ShapeSize">119,87</av:Size>
                  <av:PointCollection x:Key="TrueConnector">130.5,110 110,110 110,214.5</av:PointCollection>
                  <av:PointCollection x:Key="FalseConnector">249.83333333333331,109.83333333333334 310.6666666666667,109.83333333333334 310.6666666666667,136.5</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <FlowDecision.True>
                <FlowStep x:Name="__ReferenceID21">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">10,214.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">10,245 0,245 0,620 19,620</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="AutoExtraction Is already False" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_5">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_43" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_AlreadySetFalse"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <x:Reference>__ReferenceID15</x:Reference>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.True>
              <FlowDecision.False>
                <x:Reference>__ReferenceID20</x:Reference>
              </FlowDecision.False>
            </FlowDecision>
            <x:Reference>__ReferenceID21</x:Reference>
            <x:Reference>__ReferenceID22</x:Reference>
            <x:Reference>__ReferenceID23</x:Reference>
            <x:Reference>__ReferenceID24</x:Reference>
            <x:Reference>__ReferenceID25</x:Reference>
            <x:Reference>__ReferenceID26</x:Reference>
            <x:Reference>__ReferenceID27</x:Reference>
          </Flowchart>
        </utam:MockActivity.MockedActivity>
        <Sequence sap:VirtualizedContainerService.HintSize="1135,1158" sap2010:WorkflowViewState.IdRef="Sequence_14">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Assign &quot;passed&quot; message" sap:VirtualizedContainerService.HintSize="1093,70" sap2010:WorkflowViewState.IdRef="Assign_20">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_40">out_TestMessage</CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">passed</InArgument>
            </Assign.Value>
          </Assign>
          <Flowchart sap2010:Annotation.AnnotationText="In this step, we check to see if we have found any issues up until now in the process. If we did, we skip this flowchart and set the AutoExtraction to False, otherwise, we continue with the checks:&#xA;1. SubTotal - Checks to see if the sum of the line amounts match the extracted Net Amount.&#xA;2. Total - Checks to see if the sum of the additions to the subtotal match the extracted Total. &#xA;3.  Specific Fields - Checks the list (defined in the Config File) with their specific confidence threshold. If they are below that, the process will require manual validation.&#xA;4. Other fields - Checks the list ( defined in the Config File) with the confidence threshold defined for 'other-Confidence'. If they are below that, the process will require manual validation.&#xA;&#xA;If at any point, the above steps return a 'true', the invoice will require manual validation. &#xA;If all the if pass through the 'false' branch, the invoice will skip manual validation and go directly to the next step." DisplayName="Extraction Results Check" sap:VirtualizedContainerService.HintSize="1093,958" sap2010:WorkflowViewState.IdRef="Flowchart_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <av:Point x:Key="ShapeLocation">0,2.5</av:Point>
                <av:Size x:Key="ShapeSize">60,75</av:Size>
                <av:PointCollection x:Key="ConnectorLocation">60,40 270,40 270,96.5</av:PointCollection>
                <x:Double x:Key="Width">1058.858493870408</x:Double>
                <x:Double x:Key="Height">780</x:Double>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Flowchart.StartNode>
              <x:Reference>__ReferenceID14</x:Reference>
            </Flowchart.StartNode>
            <FlowStep x:Name="__ReferenceID0">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">19,590</av:Point>
                  <av:Size x:Key="ShapeSize">262,70</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign Extraction Failure" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_21">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">
                    <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_41">out_AutoExtractionSuccess</CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                </Assign.Value>
              </Assign>
            </FlowStep>
            <FlowDecision x:Name="__ReferenceID5" DisplayName="Subtotal Issue?" sap:VirtualizedContainerService.HintSize="84,87" sap2010:WorkflowViewState.IdRef="FlowDecision_14">
              <FlowDecision.Condition>
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_93" xml:space="preserve">!( documentFields["Net Amount"] != null &amp;&amp; subtotal ==Convert.ToDecimal(documentFields["Net Amount"])  || (documentFields["Net Amount"] == null) || ( documentFields["Net Amount"] != null &amp;&amp; (Convert.ToDecimal(documentFields["Net Amount"]) == 0)))</CSharpValue>
              </FlowDecision.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <av:Point x:Key="ShapeLocation">378,196.5</av:Point>
                  <av:Size x:Key="ShapeSize">84,87</av:Size>
                  <av:PointCollection x:Key="TrueConnector">378,240 348,240 348,315 210,315</av:PointCollection>
                  <av:PointCollection x:Key="FalseConnector">462,240 492,240 492,70 650,70</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <FlowDecision.True>
                <FlowStep x:Name="__ReferenceID1">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">10,284.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">10,315 0,315 0,625 19,625</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Subtotal Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Info">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_94">String.Format(in_Config["LogMessage_InvoicePostProcessing_SubtotalFailure"], subtotal, documentFields["net-amount"]) + Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.True>
              <FlowDecision.False>
                <FlowStep x:Name="__ReferenceID12">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">650,39.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">750,100.5 750,175</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Subtotal Pass" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_16">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_95">String.Format(in_Config["LogMessage_InvoicePostProcessing_SubtotalPass"], subtotal, documentFields["Net Amount"])+ Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <FlowStep x:Name="__ReferenceID9">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">619,175</av:Point>
                          <av:Size x:Key="ShapeSize">262,70</av:Size>
                          <av:PointCollection x:Key="ConnectorLocation">619,210 600,210 600,316.5</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Total Calculation" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_22">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Decimal">
                            <CSharpReference x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpReference`1_42">total</CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Decimal">
                            <CSharpValue x:TypeArguments="x:Decimal" sap2010:WorkflowViewState.IdRef="CSharpValue`1_96">subTotalAdditions.Select(field =&gt; Convert.ToDecimal(documentFields[field])).ToList().Sum() + subtotal</CSharpValue>
                          </InArgument>
                        </Assign.Value>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Assign>
                      <FlowStep.Next>
                        <FlowDecision x:Name="__ReferenceID2" DisplayName="Total Issue?" sap:VirtualizedContainerService.HintSize="70,87" sap2010:WorkflowViewState.IdRef="FlowDecision_13">
                          <FlowDecision.Condition>
                            <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_97">! (total == Convert.ToDecimal(documentFields["Total"]))</CSharpValue>
                          </FlowDecision.Condition>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <av:Point x:Key="ShapeLocation">565,316.5</av:Point>
                              <av:Size x:Key="ShapeSize">70,87</av:Size>
                              <av:PointCollection x:Key="TrueConnector">565,360 535,360 535,380 521,380</av:PointCollection>
                              <av:PointCollection x:Key="FalseConnector">635,360 660,360 660,416.5</av:PointCollection>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <FlowDecision.True>
                            <FlowStep x:Name="__ReferenceID13">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <av:Point x:Key="ShapeLocation">259,345</av:Point>
                                  <av:Size x:Key="ShapeSize">262,70</av:Size>
                                  <av:PointCollection x:Key="ConnectorLocation">259,380 229,380 229,385 210,385</av:PointCollection>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign DisplayName="Assign &quot;failed&quot; message" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_24">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_44">out_TestMessage</CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">failed</InArgument>
                                </Assign.Value>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Assign>
                              <FlowStep.Next>
                                <FlowStep x:Name="__ReferenceID3">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <av:Point x:Key="ShapeLocation">10,354.5</av:Point>
                                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                                      <av:PointCollection x:Key="ConnectorLocation">10,385 0,385 0,625 19,625</av:PointCollection>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="Total Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_17">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_98" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_TotalFailure"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LogMessage>
                                  <FlowStep.Next>
                                    <x:Reference>__ReferenceID0</x:Reference>
                                  </FlowStep.Next>
                                </FlowStep>
                              </FlowStep.Next>
                            </FlowStep>
                          </FlowDecision.True>
                          <FlowDecision.False>
                            <FlowDecision x:Name="__ReferenceID10" DisplayName="Specific Fields Confidence?" sap:VirtualizedContainerService.HintSize="149,87" sap2010:WorkflowViewState.IdRef="FlowDecision_12">
                              <FlowDecision.Condition>
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_99">confidenceFields.Any(confField =&gt; (! String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; ! io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config[confField+"-Confidence"])? true : false))</CSharpValue>
                              </FlowDecision.Condition>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <av:Point x:Key="ShapeLocation">585.5,416.5</av:Point>
                                  <av:Size x:Key="ShapeSize">149,87</av:Size>
                                  <av:PointCollection x:Key="TrueConnector">585.5,460 555.5,460 555.5,455 210,455</av:PointCollection>
                                  <av:PointCollection x:Key="FalseConnector">734.5,460 760,460 760,556.5</av:PointCollection>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <FlowDecision.True>
                                <FlowStep x:Name="__ReferenceID7">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <av:Point x:Key="ShapeLocation">10,424.5</av:Point>
                                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                                      <av:PointCollection x:Key="ConnectorLocation">10,455 0,455 0,625 19,625</av:PointCollection>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="Specific Confidence Fields Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_18">
                                    <ui:LogMessage.Message>
                                      <InArgument x:TypeArguments="x:Object">
                                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_100" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_ConfidenceFieldsFailure"]  + String.Join(", ", confidenceFields.Where(confField =&gt; (!String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; !io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config[confField+"-Confidence"])? true : false) == true).ToList()) +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                      </InArgument>
                                    </ui:LogMessage.Message>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LogMessage>
                                  <FlowStep.Next>
                                    <x:Reference>__ReferenceID0</x:Reference>
                                  </FlowStep.Next>
                                </FlowStep>
                              </FlowDecision.True>
                              <FlowDecision.False>
                                <FlowDecision x:Name="__ReferenceID11" DisplayName="Other Fields Confidence?" sap:VirtualizedContainerService.HintSize="138,87" sap2010:WorkflowViewState.IdRef="FlowDecision_11">
                                  <FlowDecision.Condition>
                                    <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_101">otherConfidenceFields.Any(confField =&gt; (! String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; ! io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config["other-Confidence"])? true : false))</CSharpValue>
                                  </FlowDecision.Condition>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <av:Point x:Key="ShapeLocation">691,556.5</av:Point>
                                      <av:Size x:Key="ShapeSize">138,87</av:Size>
                                      <av:PointCollection x:Key="TrueConnector">691,600 661,600 661,525 210,525</av:PointCollection>
                                      <av:PointCollection x:Key="FalseConnector">829,600 880,600 880,695</av:PointCollection>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <FlowDecision.True>
                                    <FlowStep x:Name="__ReferenceID8">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <av:Point x:Key="ShapeLocation">10,494.5</av:Point>
                                          <av:Size x:Key="ShapeSize">200,61</av:Size>
                                          <av:PointCollection x:Key="ConnectorLocation">10,525 0,525 0,625 19,625</av:PointCollection>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:LogMessage DisplayName="Other Confidence fields Failure" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_19">
                                        <ui:LogMessage.Message>
                                          <InArgument x:TypeArguments="x:Object">
                                            <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_102" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_ConfidenceFieldsFailure"] + String.Join(", ", otherConfidenceFields.Where(confField =&gt; (!String.IsNullOrEmpty(documentFields[confField]) &amp;&amp; !io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(missing =&gt; missing.IsMissing.Equals(true)).First() &amp;&amp; Convert.ToDecimal(io_ExtractionResults.ResultsDocument.Fields.Where(field =&gt; field.FieldName.Equals(confField)).Select(actual_field =&gt; actual_field.Values.Select(val =&gt; val.Confidence)).First().First())*100 &lt; Convert.ToDecimal(in_Config["other-Confidence"])? true : false) == true).ToList())  +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                                          </InArgument>
                                        </ui:LogMessage.Message>
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:LogMessage>
                                      <FlowStep.Next>
                                        <x:Reference>__ReferenceID0</x:Reference>
                                      </FlowStep.Next>
                                    </FlowStep>
                                  </FlowDecision.True>
                                  <FlowDecision.False>
                                    <FlowStep x:Name="__ReferenceID4">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <av:Point x:Key="ShapeLocation">749,695</av:Point>
                                          <av:Size x:Key="ShapeSize">262,70</av:Size>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Assign DisplayName="Assign Extraction Success" sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_23">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Boolean">
                                            <CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_43">out_AutoExtractionSuccess</CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </FlowStep>
                                  </FlowDecision.False>
                                </FlowDecision>
                              </FlowDecision.False>
                            </FlowDecision>
                          </FlowDecision.False>
                        </FlowDecision>
                      </FlowStep.Next>
                    </FlowStep>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.False>
            </FlowDecision>
            <x:Reference>__ReferenceID1</x:Reference>
            <x:Reference>__ReferenceID2</x:Reference>
            <x:Reference>__ReferenceID3</x:Reference>
            <x:Reference>__ReferenceID4</x:Reference>
            <FlowDecision x:Name="__ReferenceID14" DisplayName="AutoExtraction Issue?" sap:VirtualizedContainerService.HintSize="119,87" sap2010:WorkflowViewState.IdRef="FlowDecision_15">
              <FlowDecision.Condition>
                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_91">out_AutoExtractionSuccess == false</CSharpValue>
              </FlowDecision.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <av:Point x:Key="ShapeLocation">210.5,96.5</av:Point>
                  <av:Size x:Key="ShapeSize">119,87</av:Size>
                  <av:PointCollection x:Key="TrueConnector">210.5,140 110,140 110,214.5</av:PointCollection>
                  <av:PointCollection x:Key="FalseConnector">329.5,140 420,140 420,196.5</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <FlowDecision.True>
                <FlowStep x:Name="__ReferenceID6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">10,214.5</av:Point>
                      <av:Size x:Key="ShapeSize">200,61</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">10,245 0,245 0,625 19,625</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="AutoExtraction Is already False" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_14">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_92" xml:space="preserve">in_Config["LogMessage_InvoicePostProcessing_AlreadySetFalse"] +  Environment.NewLine + in_Config["logKey"]</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <FlowStep.Next>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </FlowStep.Next>
                </FlowStep>
              </FlowDecision.True>
              <FlowDecision.False>
                <x:Reference>__ReferenceID5</x:Reference>
              </FlowDecision.False>
            </FlowDecision>
            <x:Reference>__ReferenceID6</x:Reference>
            <x:Reference>__ReferenceID7</x:Reference>
            <x:Reference>__ReferenceID8</x:Reference>
            <x:Reference>__ReferenceID9</x:Reference>
            <x:Reference>__ReferenceID10</x:Reference>
            <x:Reference>__ReferenceID11</x:Reference>
            <x:Reference>__ReferenceID12</x:Reference>
            <x:Reference>__ReferenceID13</x:Reference>
          </Flowchart>
        </Sequence>
      </utam:MockActivity>
    </Sequence>
  </Sequence>
</Activity>